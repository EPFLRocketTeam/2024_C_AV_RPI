        -:    0:Source:/home/av/UnitDir/2024_C_AV_RPI/src/data/data.h
        -:    0:Graph:./build/tests/CMakeFiles/data_test.dir/data_test.cpp.gcno
        -:    0:Data:./build/tests/CMakeFiles/data_test.dir/data_test.cpp.gcda
        -:    0:Runs:3
        -:    1:#ifndef DATA_H
        -:    2:#define DATA_H
        -:    3:
        -:    4:#include <cstdint>
        -:    5:#include <Protocol.h>
        -:    6:#include "bmi08x.h"
        -:    7:#include "bmp3.h"
        -:    8:#include "adxl375.h"
        -:    9:
        -:   10:/**
        -:   11: * @brief A struct made only for convenience. Holds exactly
        -:   12: * the same data than av_uplink_t, but the command ID is already
        -:   13: * cast from uint8_t to CMD_ID to facilitate switch statements.
        -:   14: */
        -:   15:struct UplinkCmd {
        -:   16:    CMD_ID id;
        -:   17:    uint8_t value;
        -:   18:};
        -:   19:
        -:   20:struct SensStatus {
        -:   21:    uint8_t     adxl_status;
        -:   22:    uint8_t     adxl_aux_status;
        -:   23:    uint8_t     bmi_accel_status;
        -:   24:    uint8_t     bmi_aux_accel_status;
        -:   25:    uint8_t     bmi_gyro_status;
        -:   26:    uint8_t     bmi_aux_gyro_status;
        -:   27:    bmp3_status bmp_status;
        -:   28:    bmp3_status bmp_aux_status;
        -:   29:};
        -:   30:
        -:   31:struct NavSensors {
        -:   32:    adxl375_data        adxl;
        -:   33:    adxl375_data        adxl_aux;
        -:   34:    bmi08_sensor_data_f bmi_accel;
        -:   35:    bmi08_sensor_data_f bmi_gyro; // Correspondance x,y,z / roll,pitch,yaw à déterminer
        -:   36:    bmi08_sensor_data_f bmi_aux_accel;
        -:   37:    bmi08_sensor_data_f bmi_aux_gyro;
        -:   38:    bmp3_data           bmp;
        -:   39:    bmp3_data           bmp_aux;
        -:   40:
        -:   41:    NavSensors();
        -:   42:};
        -:   43:
        -:   44:struct PropSensors {
        -:   45:    double    N2_pressure;
        -:   46:    double    fuel_pressure;
        -:   47:    double    LOX_pressure;
        -:   48:    double    igniter_pressure;
        -:   49:    double    LOX_inj_pressure;
        -:   50:    double    fuel_inj_pressure;
        -:   51:    double    chamber_pressure;
        -:   52:    double    fuel_level;
        -:   53:    double    LOX_level;
        -:   54:    double    N2_temperature;
        -:   55:    double    fuel_temperature;
        -:   56:    double    LOX_temperature;
        -:   57:    double    igniter_temperature;
        -:   58:    double    fuel_inj_temperature;
        -:   59:    double    fuel_inj_cooling_temperature;
        -:   60:    double    LOX_inj_temperature;
        -:   61:    double    chamber_temperature;
        -:   62:
        -:   63:    PropSensors();
        -:   64:};
        -:   65:
        -:   66:struct Vector3 {
        -:   67:    double x;
        -:   68:    double y;
        -:   69:    double z;
        -:   70:};
        -:   71:
        -:   72:struct GPSCoord {
        -:   73:    double lat;
        -:   74:    double lng;
        -:   75:    double alt;
        -:   76:};
        -:   77:
        -:   78:struct GPSTime {
        -:   79:    unsigned year;
        -:   80:    unsigned month;
        -:   81:    unsigned day;
        -:   82:    unsigned hour;
        -:   83:    unsigned minute;
        -:   84:    unsigned second;
        -:   85:    unsigned centisecond;
        -:   86:};
        -:   87:
        -:   88:struct NavigationData {
        -:   89:    GPSTime   time;
        -:   90:    GPSCoord  position;
        -:   91:    Vector3   speed;
        -:   92:    Vector3   accel;
        -:   93:    Vector3   attitude;
        -:   94:    double    course;
        -:   95:    double    altitude;
        -:   96:    bmp3_data baro;
        -:   97:
        -:   98:    NavigationData();
        -:   99:};
        -:  100:
        -:  101:struct DataDump {
        -:  102:    UplinkCmd telemetry_cmd;
        -:  103:    SensStatus stat;
        -:  104:    NavSensors sens;
        -:  105:    PropSensors prop;
        -:  106:    NavigationData nav;
        -:  107:};
        -:  108:
        -:  109:/**
        -:  110: * @brief GOAT - Global Objects Atomic Table
        -:  111: * https://rocket-team.epfl.ch/competition/firehorn/systems_engineering/other/sam_homepage/avionics/software/architecture
        -:  112: * 
        -:  113: * Serves as the collection of all non-volatile variables.
        -:  114: */
        -:  115:class Data {
        -:  116:public:
        -:  117:    enum GoatReg {
        -:  118:        /* Telemetry command */
        -:  119:        TLM_CMD_ID = 0x00,
        -:  120:        TLM_CMD_VALUE = 0x01,
        -:  121:
        -:  122:        /* Navigation sensors status */
        -:  123:        NAV_SENSOR_ADXL1_STAT = 0x02,
        -:  124:        NAV_SENSOR_ADXL2_STAT = 0x03,
        -:  125:        NAV_SENSOR_BMI1_ACCEL_STAT = 0x04,
        -:  126:        NAV_SENSOR_BMI2_ACCEL_STAT = 0x05,
        -:  127:        NAV_SENSOR_BMI1_GYRO_STAT = 0x07,
        -:  128:        NAV_SENSOR_BMI2_GYRO_STAT = 0x08,
        -:  129:        NAV_SENSOR_BMP1_STAT = 0x09,
        -:  130:        NAV_SENSOR_BMP2_STAT = 0x0A,
        -:  131:
        -:  132:        /* Raw navigation sensors data */
        -:  133:        NAV_SENSOR_ADXL1_DATA = 0x0B,
        -:  134:        NAV_SENSOR_ADXL2_DATA = 0x0C,
        -:  135:        NAV_SENSOR_BMI1_ACCEL_DATA = 0x0D,
        -:  136:        NAV_SENSOR_BMI1_GYRO_DATA = 0x0E,
        -:  137:        NAV_SENSOR_BMI2_ACCEL_DATA = 0x0F,
        -:  138:        NAV_SENSOR_BMI2_GYRO_DATA = 0x10,
        -:  139:        NAV_SENSOR_BMP1_DATA = 0x11,
        -:  140:        NAV_SENSOR_BMP2_DATA = 0x12,
        -:  141:
        -:  142:        /* Propulsion sensors */
        -:  143:        PR_SENSOR_P_NCO = 0x13, // N2 Pressure
        -:  144:        PR_SENSOR_P_ETA = 0x14, // Ethanol Tank Pressure
        -:  145:        PR_SENSOR_P_OTA = 0x15, // Lox Tank Pressure
        -:  146:        PR_SENSOR_P_CIG = 0x16, // Igniter Pressure
        -:  147:        PR_SENSOR_P_EIN = 0x17, // Ethanol Injector Pressure
        -:  148:        PR_SENSOR_P_OIN = 0x18, // Lox Injector Pressure
        -:  149:        PR_SENSOR_P_CCC = 0x19, // Combustion Chamber Pressure
        -:  150:        PR_SENSOR_L_ETA = 0x1A, // Ethanol Tank Level
        -:  151:        PR_SENSOR_L_OTA = 0x1B, // Lox Tank Level
        -:  152:        PR_SENSOR_T_NCO = 0x1C, // N2 Temperature
        -:  153:        PR_SENSOR_T_ETA = 0x1D, // Ethanol Tank Temperature
        -:  154:        PR_SENSOR_T_OTA = 0x1E, // Lox Tank Temperature
        -:  155:        PR_SENSOR_T_CIG = 0x1F, // Igniter Temperature
        -:  156:        PR_SENSOR_T_EIN = 0x20, // Ethanol Injector Temperature (Sensata PTE7300)
        -:  157:        PR_SENSOR_T_EIN_CF = 0x21, // Ethanol Injector Cooling Fluid Tempreature (PT1000)
        -:  158:        PR_SENSOR_T_OIN = 0x22, // Lox Injector Temperature
        -:  159:        PR_SENSOR_T_CCC = 0x23,  // Combustion Chamber Temperature
        -:  160:
        -:  161:        NAV_GNSS_TIME_YEAR = 0x24,
        -:  162:        NAV_GNSS_TIME_MONTH = 0x25,
        -:  163:        NAV_GNSS_TIME_DAY = 0x26,
        -:  164:        NAV_GNSS_TIME_HOUR = 0x27,
        -:  165:        NAV_GNSS_TIME_MINUTE = 0x28,
        -:  166:        NAV_GNSS_TIME_SECOND = 0x29,
        -:  167:        NAV_GNSS_TIME_CENTI = 0x2A,
        -:  168:        NAV_GNSS_POS_LAT = 0x2B,
        -:  169:        NAV_GNSS_POS_LNG = 0x2C,
        -:  170:        NAV_GNSS_POS_ALT = 0x2D,
        -:  171:        NAV_GNSS_COURSE = 0x2E
        -:  172:    };
        -:  173:
        3:  174:    static inline Data& get_instance() {
        3:  175:        static Data instance;
        3:  176:        return instance;
        -:  177:    }
        -:  178:
        -:  179:    // /**
        -:  180:    //  * @brief Reads specific data from the GOAT.
        -:  181:    //  * @param reg (most likely an enum, acts like a register), specifies what data is to be read.
        -:  182:    //  * @return A read only pointer to the data located at the given field.
        -:  183:    //  */
        -:  184:    // const void* read(GoatReg reg);
        -:  185:
        -:  186:    /**
        -:  187:     * @brief Writes data to the GOAT.
        -:  188:     * @param reg Enum specifying where to write the data.
        -:  189:     * @param data The data which is to be written.
        -:  190:     */
        -:  191:    void write(GoatReg reg, void* data);
        -:  192:
        -:  193:    DataDump get() const;
        -:  194:
        -:  195:    Data(Data const&) = delete; // Prevents copying
        -:  196:    void operator=(Data const&) = delete; // Prevents assignment
        -:  197:private:
        3:  198:    inline Data() {}
        3:  199:    inline ~Data() {}
        -:  200:
        -:  201:    UplinkCmd telemetry_cmd;
        -:  202:    SensStatus sensors_status;
        -:  203:    NavSensors nav_sensors;
        -:  204:    PropSensors prop_sensors;
        -:  205:    NavigationData nav;
        -:  206:};
        -:  207:
        -:  208:#endif /* DATA_H */
