name: Trigger Tests

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build-and-run-unit-tests:
    runs-on: [self-hosted]
    steps:

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          sudo apt-get update
          mkdir build
          cd build
          cmake -DENABLE_TESTING=ON -DENABLE_COVERAGE=ON ..
          make

      - name: Run unit tests
        run: |
          cd build
          ctest --output-on-failure

#      - name: Sonar analysis
#        uses: SonarSource/sonarcloud-github-action@v1
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        with:
#          args: >
#            -Dsonar.exclusions=src/sensor_drivers/**,src/i2c_interface/**,src/post_flight/**
#            -Dsonar.sources=src
#            -Dsonar.tests=tests
#            -Dsonar.cfamily.compile-commands=build/compile_commands.json
#            -Dsonar.host.url=https://sonarcloud.io
#            -Dsonar.scm.provider=git
#            -Dsonar.projectKey=epflrocketteam-1_2024_C_AV_RPI
#            -Dsonar.organization=epflrocketteam-1
#            -Dsonar.projectBaseDir=/home/av/UnitDir/2024_C_AV_RPI
#            -Dsonar.cfamily.gcov.reportsPath=build
#            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
#            -Dsonar.pullrequest.branch=${{ github.head_ref }}
#            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: Cleaning
        run: |
          rm -r build


  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: compile and test on remote device
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          key: ${{ secrets.RPI_PRIVATE_KEY }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            # Initialize a variable to indicate if any command failed
            failed=false
            ls
            cd ./UnitDir
            git clone git@github.com:EPFLRocketTeam/2024_C_AV_RPI.git
            cd ./2024_C_AV_RPI
            git checkout ${{ github.head_ref }}
            git submodule update --init --recursive --remote
            mkdir build
            cd build
            cmake -DENABLE_TESTING=ON -DENABLE_COVERAGE=ON ..
            make

            if [ $? -ne 0 ]; then
              failed=true
            fi
            ctest --output-on-failure   
            if [ $? -ne 0 ]; then
              failed=true
            fi
            
            find . -name "*.gcda" -exec gcov {} \;
            source ~/.bashrc
            cd ..
            /opt/sonar-scanner/bin/sonar-scanner -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.exclusions=src/sensor_drivers/**,src/i2c_interface/**,src/post_flight/**  -Dsonar.sources=src -Dsonar.tests=tests -Dsonar.cfamily.compile-commands=build/compile_commands.json -Dsonar.host.url=https://sonarcloud.io -Dsonar.scm.provider=git -Dsonar.projectKey=epflrocketteam-1_2024_C_AV_RPI -Dsonar.organization=epflrocketteam-1 -Dsonar.projectBaseDir=/home/av/UnitDir/2024_C_AV_RPI -Dsonar.cfamily.gcov.reportsPath=build -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }}
        
            cd ..
            rm -rf 2024_C_AV_RPI
            if [ "$failed" = true ]; then
              exit 1
            fi