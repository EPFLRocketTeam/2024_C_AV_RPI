name: Trigger Tests

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened



jobs:
##  trigger:
##    runs-on: ubuntu-latest
##
##    steps:
##      - name: Trigger tests repository
##        id: trigger
##        uses: peter-evans/repository-dispatch@v1
##        with:
##          token: ${{ secrets.REPO_ACCESS_TOKEN }}
##          repository: EPFLRocketTeam/C_AV_SIL
##          event-type: run-tests
##          client-payload: |
##            {
##              "branch": "${{ github.head_ref }}",
##              "baseref" : "${{github.base_ref}}",
##              "commit": "${{ github.sha }}",
##              "repo": "${{ github.repository }}",
##              "key": "${{github.event.pull_request.number}}"
##            }
##  checking:
##    runs-on: ubuntu-latest
##    needs: trigger
##    steps:
##      - name: Wait for workflow to complete
##        run: |
##          sleep 80
##          while true; do
##            sleep 10
##            STATUS=$(curl -s -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
##              "https://api.github.com/repos/EPFLRocketTeam/C_AV_SIL/actions/runs?event=repository_dispatch&status=completed" | \
##              jq -r '.workflow_runs[0].conclusion')
##            echo "Status: $STATUS"
##            if [ "$STATUS" == "success" ]; then
##              echo "Dispatched workflow succeeded"
##              break
##            elif [ "$STATUS" == "failure" ]; then
##              echo "Dispatched workflow failed"
##              exit 1
##            fi
##          done
          

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: compile and test on remote device
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            # Initialize a variable to indicate if any command failed
            failed=false
            ls
            cd ./UnitDir
            git clone git@github.com:EPFLRocketTeam/2024_C_AV_RPI.git
            cd ./2024_C_AV_RPI
            git checkout ${{ github.head_ref }}
            git submodule update --init --recursive --remote
            mkdir build
            cd build
            cmake -DENABLE_TESTING=ON -DENABLE_COVERAGE=ON ..
            make

            if [ $? -ne 0 ]; then
              failed=true
            fi
            ctest            
            if [ $? -ne 0 ]; then
              failed=true
            fi
            
            find . -name "*.gcda" -exec gcov {} \;
            source ~/.bashrc
            cd ..
            /opt/sonar-scanner/bin/sonar-scanner -Dsonar.token=a25ce57e455d62a8212a6caa83741f8e4cf868fa -Dsonar.sources=src -Dsonar.tests=tests -Dsonar.cfamily.compile-commands=build/compile_commands.json -Dsonar.host.url=https://sonarcloud.io -Dsonar.scm.provider=git -Dsonar.projectKey=epflrocketteam-1_2024_C_AV_RPI -Dsonar.organization=epflrocketteam-1 -Dsonar.projectBaseDir=/home/av/UnitDir/2024_C_AV_RPI -Dsonar.cfamily.gcov.reportsPath=build -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }}
        
        
            cd ..
            #rm -rf 2024_C_AV_RPI
            if [ "$failed" = true ]; then
              exit 1
            fi
            
            
            
  

    
      


  

            
            
