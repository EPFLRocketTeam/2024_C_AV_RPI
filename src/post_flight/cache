{"key": ["/home/cyprien/Devel/2024_C_AV_RPI/2024_C_AV-GS_CAPSULE/src/capsule.h:28f11f33c799213d369b1fc25e09348ee1e3d0b02c8ae5c19793f8d5b95024fc", "/home/cyprien/Devel/2024_C_AV_RPI/2024_C_AV_INTRANET/intranet_commands.h:bb8d6f686189c29a46af43bd92024024f97532f80163662e2e905b3138149530", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/DownlinkCompression_Firehorn.h:0bda1ba7a6f92eb2980a7a425d9a73326fa6353c5c86ad9234ccb31c23167c30", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/PacketDefinition_Common.h:3eec2ea0d20b5148b8f0e4d469e5bd87b173709dce83647cb148d3c4fda9fe45", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/PacketDefinition_Firehorn.h:9e8cdad1309f185f6e18fe5e77da4b51a849edaf7238382a9abbf721df16dc34", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/PacketDefinition_Icarus.h:da2ac85a19b7a0d596915a17020acdfbffd15b7cd91727a92d39057c0c3091cc", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/PacketDefinition_Nordend.h:f388f4d2f69ae1b58b093178a3da74bc76263d0bba4ce2d2afd04c51f17aa761", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/ParameterDefinition_Firehorn.h:1d6efa96cd2f0305f11d8be902f3274db00b19a166cb7f3e59407dc9df81a8a1", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/ParameterDefinition_Icarus.h:f209cbb2335f3e8fa70324dc8ee3d7b16888f73b5811d7861a132f9129844a1d", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/ParameterDefinition_Nordend.h:c39404ad21a82c8f79b607adc9df869c9eefc6944629093977fe305929dbf230", "/home/cyprien/Devel/2024_C_AV_RPI/ERT_RF_Protocol_Interface/Protocol.h:4783af011cd98d5cd14f174339b3d00a2214703a3c3896004ce8ea4219d92a89", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/LoRa.h:4c94fb0c51a8fadce5c3bdcba3eb719d4e1519017c41350cace8f0c1d5675a4c", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/LoopbackStream.h:a3278c32be67c5c0b93753934faf23e7cd26c58ed5c13cf5a991e3b4b873a777", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/Print.h:763514e995cf9f0e2808d4255895680ec16410e990eb65807dbd77149e4bbd50", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/Printable.h:b669d113eebe28f1156ee82061a89bec85d481a7a611b55775e3a9a8f8510200", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/Stream.h:4f8adb5c1ab52d5f2b5a831cf8bdc0ae49b92c32dd22f2dc5c53389322701cdb", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/WString.h:6c51d5a7ca28cf612730b4af12803dbcf882142ecc27d9a601533942be6da618", "/home/cyprien/Devel/2024_C_AV_RPI/LoRa4Raspi/include/itoa.h:00b57f00a005d26c757dc908a1ca4bcdce237fc564bedb0a4b3523ec82605a48", "/home/cyprien/Devel/2024_C_AV_RPI/src/av_timer.h:8c2c731855ed0006427d00df74b2c5f9233c6d4e1e2f08c6d1a78f209b27b1b5", "/home/cyprien/Devel/2024_C_AV_RPI/src/buzzer.h:f2da8722d13207fb0a0e273feede0da62efdd678fc9c0064ce5def0e7bf69280", "/home/cyprien/Devel/2024_C_AV_RPI/src/config.h:b73c5a8d98464ab754292b47d6e7d839e47416b2e8ee6f0b991ea67c7e249c6c", "/home/cyprien/Devel/2024_C_AV_RPI/src/data/data.h:6252991ef44028ba2b89a5daad1245429b7765c3250ef03674055779b4f5b58c", "/home/cyprien/Devel/2024_C_AV_RPI/src/data/logger.h:708148b16085a72fd4ef4eb58bb0423d64334d0e3c4e04461ebf3750ee881adf", "/home/cyprien/Devel/2024_C_AV_RPI/src/flight_control/av_state.h:8dc878611a4f5e158b811746781b0e2c675ba93bd98f6dfb5e8da28f7c18b091", "/home/cyprien/Devel/2024_C_AV_RPI/src/flight_control/thresholds.h:9c5f9c3026101f99811f42198a27693fc075164b890127e561db8dbd3fd82e1f", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/PR_board.h:36343c9f1e0da629223b8e55f6893dc9cf87078313c9c10f549436bc021887b7", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/camera.h:c56705564571567803a5d9fc2d2eb0ce04292d6e9b15ab41d55f2ace972516c2", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/dpr.h:06943d4c3d24b57fe6aee52b5a4eae5ba2cbffecdfaf6eb3c76bc082c7db619a", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/h_driver.h:682bb01f34bfbe7a35cb7499068e8a7df6966cc7d153efa889756b40489358c4", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/sensors.h:e027373cd73138f8371fa04ffeb97db82939e50ac1fd0e6979ec7af725cfa5a7", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/telecom.h:8214fa765fec784c63fe61428d756feb5fe3ba55b33e13bc87cce33349188f2d", "/home/cyprien/Devel/2024_C_AV_RPI/src/h_drivers/trigger_board.h:8cf16381d8fd0a6707412d4e0ea2edfed1bcc4bc8f4cba8c2873afa8b5e0e892", "/home/cyprien/Devel/2024_C_AV_RPI/src/i2c_interface/i2c_interface.h:5b06aedc577f0d081b344120cf8053c425a385a7511f5e6fcc680e0ba3e42c5b", "/home/cyprien/Devel/2024_C_AV_RPI/src/i2c_interface/i2c_wrappers.h:65cbe80a37b4d6ec880f9e07ee8db2b81a6e521747262e00a632b04e03450372", "/home/cyprien/Devel/2024_C_AV_RPI/src/kalman/kalman.h:cbccfa7c92f33d69b7ea32d4d4f81f8ad03e33a472e8f5a224842795acce4b14", "/home/cyprien/Devel/2024_C_AV_RPI/src/kalman/kalman_params.h:2b58559caeeca241be27c20c3ff7896ca51b5ea361f504cf3529b8c4cc49e533", "/home/cyprien/Devel/2024_C_AV_RPI/src/kalman/rotation_utils.h:bbfcd8a87984b00901c7376189a64bca819899e831b1abbba45ad8208a77e26c", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/dynconf.h:1f92ef31cd8eab8f1aef6651c96d9b0ddd226b331d5f43ec8c7aa7c120cb4bb3", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/module.h:bfd8689061896375ccefd256d87530a2ffed245444905df7f52a9f18bcd59194", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/adxl375_module.h:8e1e7efec01025c9102f90458851d064de8f337ee056af10e3e12f025b608091", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/bmi088_module.h:d78ed3bdf7655f1a9d2d85719c309174d43b8431a68344925402f2b08d4ede3a", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/bmp390_module.h:2ee1671aa5338d6364fa8b60d866f203633010ec175f4224bd4f1c51875d219f", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/gps_module.h:9e1ff5ea04e2f33af07f8e6f9e6927fe8bb4ea0629aad91238057314b646e352", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/ina228_module.h:5c08737962f683e96c7fff831e96846d6c793e53e14964dafd7593774d3d7186", "/home/cyprien/Devel/2024_C_AV_RPI/src/modules/sensors/tmp1075_module.h:2629557434ae9938a7d6a7f3f0538b920c01d4535baafae3ec113b4956a41baa", "/home/cyprien/Devel/2024_C_AV_RPI/src/neopixel/led_ws2812.h:870b4d233971d9069f750541ae08c4d1b7a3ad137b151468c89e971dfdf9a421", "/home/cyprien/Devel/2024_C_AV_RPI/src/neopixel/led_ws2812_defines.h:ddeaf89cdccbd80194a21c9d72b6e455281a3e012f49330567d25ddc1b6c7d17", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/I2CGPS.h:6ca0a06c5588b2a0ccb5e73eca01add1ef64190cb0b926cc8987d3a7ac82d3a9", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/INA228.h:3ac424dc1c6813ed18ddf6e27cd596d76d86ec94c19d20cfa55a6a246784c85a", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/TMP1075.h:878fa33d705d644841540e7d0bd73459369bd83edbd47bb15688ebd59ab778d2", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/TinyGPS++.h:d41a18b5e7ff7cc3b68ad5396e6a5357e40a9e32b15153fcdfbcf1342d843d2e", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/adxl375.h:dd90e8dc24eee95f1d6399e120ef17e043d3fb5b6650409c314a2eb7f45d1d13", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/bmi08.h:c839b1ea842ae518506e056d70684021ffcb230b7aa590149479e2e5ba394574", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/bmi08_defs.h:71ccecc6692bb4248e9f5a647edabad935d4d356b7c2e5e88a19b9c40c0831a3", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/bmi08x.h:39b13498afee10560f67a787c5b8880c1235cf45e172e100e8fb23bc019a1266", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/bmp3.h:7327b287428acd2651e0883ac7f3211ec6467b6ae8d32449e5951463487c7ba7", "/home/cyprien/Devel/2024_C_AV_RPI/src/sensor_drivers/bmp3_defs.h:9c9507cd45907b36a0f2f0cd5faa4402a2a0503a58123f45fea96dae6e6af51f", "/home/cyprien/Devel/2024_C_AV_RPI/tests/MockSensor.h:87a4f5b2f44f92786448d8c816201a57dbdb016d4ac29cbbf45e5f493e14343c"], "content": [{"__true_type": [], "__false_type": [], "__truth_type": [], "__is_void": [], "__is_integer": [], "__is_floating": [], "__is_char": [], "__is_byte": [], "__is_memcmp_ordered_with": [], "__add_unsigned": [], "__remove_unsigned": [], "__promote": [], "__is_integer_nonstrict": [], "__numeric_traits": [], "__conditional": [], "__or_": [], "__and_": [], "__failure_type": [], "__is_void_helper": [], "__is_integral_helper": [], "__is_floating_point_helper": [], "__is_null_pointer_helper": [], "__do_is_destructible_impl": [], "__do_is_nt_destructible_impl": [], "__do_is_implicitly_default_constructible_impl": [], "__make_unsigned": [], "__make_signed": [], "__do_common_type_impl": [], "common_type": [], "__invoke_memfun_ref": [], "__invoke_memfun_deref": [], "__invoke_memobj_ref": [], "__invoke_memobj_deref": [], "__invoke_other": [], "__result_of_memfun_ref_impl": [], "__result_of_memfun_deref_impl": [], "__result_of_memobj_ref_impl": [], "__result_of_memobj_deref_impl": [], "__result_of_other_impl": [], "__do_is_swappable_impl": [], "__do_is_nothrow_swappable_impl": [], "__do_is_swappable_with_impl": [], "__do_is_nothrow_swappable_with_impl": [], "__nonesuchbase": [], "__nonesuch": [], "in_place_t": [], "piecewise_construct_t": [], "__zero_as_null_pointer_constant": [], "__pair_get": [], "input_iterator_tag": [], "output_iterator_tag": [], "forward_iterator_tag": [], "bidirectional_iterator_tag": [], "random_access_iterator_tag": [], "_Iter_less_iter": [], "_Iter_less_val": [], "_Val_less_iter": [], "_Iter_equal_to_iter": [], "_Iter_equal_to_val": [], "__copy_move": [], "__copy_move_backward": [], "__equal": [], "__lc_rai": [], "__lexicographical_compare": [], "nothrow_t": [], "_Destroy_aux": [], "_Destroy_n_aux": [], "__uninitialized_construct_buf_dispatch": [], "param_type": [["_M_a", "_IntType"], ["_M_b", "_IntType"]], "__locale_struct": [["]", "struct __locale_data * __locales [ 13"], ["__ctype_b", "const unsigned short int *"], ["__ctype_tolower", "const int *"], ["__ctype_toupper", "const int *"], ["]", "const char * __names [ 13"]], "timeval": [["tv_sec", "__time_t"], ["tv_usec", "__suseconds_t"]], "timespec": [["tv_sec", "__time_t"], ["tv_nsec", "__syscall_slong_t"]], "__pthread_internal_list": [["__prev", "struct __pthread_internal_list *"], ["__next", "struct __pthread_internal_list *"]], "__pthread_internal_slist": [["__next", "struct __pthread_internal_slist *"]], "__pthread_mutex_s": [["__lock", "int"], ["__count", "unsigned int"], ["__owner", "int"], ["__nusers", "unsigned int"], ["__kind", "int"], ["__spins", "int"], ["__list", "__pthread_list_t"]], "__pthread_rwlock_arch_t": [["__readers", "unsigned int"], ["__writers", "unsigned int"], ["__wrphase_futex", "unsigned int"], ["__writers_futex", "unsigned int"], ["__pad3", "unsigned int"], ["__pad4", "unsigned int"], ["__cur_writer", "int"], ["__shared", "int"], ["__pad1", "unsigned long int"], ["__pad2", "unsigned long int"], ["__flags", "unsigned int"]], "__pthread_cond_s": [["__wseq", "__atomic_wide_counter"], ["__g1_start", "__atomic_wide_counter"], ["]", "unsigned int __g_refs [ 2"], ["]", "unsigned int __g_size [ 2"], ["__g1_orig_size", "unsigned int"], ["__wrefs", "unsigned int"], ["]", "unsigned int __g_signals [ 2"]], "random_data": [["fptr", "int32_t *"], ["rptr", "int32_t *"], ["state", "int32_t *"], ["rand_type", "int"], ["rand_deg", "int"], ["rand_sep", "int"], ["end_ptr", "int32_t *"]], "drand48_data": [["]", "unsigned short int __x [ 3"], ["]", "unsigned short int __old_x [ 3"], ["__c", "unsigned short int"], ["__init", "unsigned short int"], ["__a", "unsigned long long int"]], "is_execution_policy": [], "plus": [], "minus": [], "multiplies": [], "divides": [], "modulus": [], "negate": [], "equal_to": [], "not_equal_to": [], "greater": [], "less": [], "greater_equal": [], "less_equal": [], "logical_and": [], "logical_or": [], "logical_not": [], "bit_and": [], "bit_or": [], "bit_xor": [], "bit_not": [], "__erased_type": [], "allocator_arg_t": [], "__uses_alloc_base": [], "__uses_alloc0": [["_M_a", "struct _Sink { void _GLIBCXX20_CONSTEXPR operator = ( const void * ) { } }"]], "_Sink": [], "__combine_tuples": [], "__make_1st_indices": [], "_Swallow_assign": [], "hash": [], "_Hash_impl": [], "_Fnv_hash_impl": [], "__is_fast_hash": [], "__allocator_traits_base": [], "allocator_traits": [], "_Tp2": [["_M_t", "_Tp"]], "_Identity": [], "_Select1st": [], "_NodeBuilder": [], "_Hash_node_base": [["_M_nxt", "_Hash_node_base *"]], "_Hash_node_code_cache": [["_M_hash_code", "std :: size_t"]], "_Mod_range_hashing": [], "_Default_ranged_hash": [], "_Prime_rehash_policy": [["_M_max_load_factor", "float"], ["_M_next_resize", "mutable std :: size_t"]], "_Mask_range_hashing": [], "_Power2_rehash_policy": [["_M_max_load_factor", "float"], ["_M_next_resize", "std :: size_t"]], "_Enable_default_constructor_tag": [], "_Empty": [], "_Scoped_node": [["_M_h", "__hashtable_alloc *"], ["_M_node", "__node_ptr"]], "__hash_code_base_access": [], "__uninitialized_copy": [], "__uninitialized_fill": [], "__uninitialized_fill_n": [], "__uninitialized_default_1": [], "__uninitialized_default_n_1": [], "__uninitialized_default_novalue_1": [], "__uninitialized_default_novalue_n_1": [], "_Vector_impl_data": [["_M_start", "pointer"], ["_M_finish", "pointer"], ["_M_end_of_storage", "pointer"]], "_Vector_impl": [], "_Temporary_value": [["_M_this", "vector *"], ["_M_storage", "_Storage"]], "_Bit_reference": [["_M_p", "_Bit_type *"], ["_M_mask", "_Bit_type"]], "_Bit_iterator_base": [["_M_p", "_Bit_type *"], ["_M_offset", "unsigned int"]], "_Bit_iterator": [], "_Bit_const_iterator": [], "_Bvector_impl_data": [["_M_start", "_Bit_iterator"], ["_M_finish", "_Bit_iterator"], ["_M_end_of_storage", "_Bit_pointer"]], "_Bvector_impl": [], "_Type": [], "__is_byte_like": [], "__invalid_type": [], "sched_param": [["sched_priority", "int"]], "timex": [["modes", "unsigned int"], ["offset", "__syscall_slong_t"], ["freq", "__syscall_slong_t"], ["maxerror", "__syscall_slong_t"], ["esterror", "__syscall_slong_t"], ["status", "int"], ["constant", "__syscall_slong_t"], ["precision", "__syscall_slong_t"], ["tolerance", "__syscall_slong_t"], ["time", "struct timeval"], ["tick", "__syscall_slong_t"], ["ppsfreq", "__syscall_slong_t"], ["jitter", "__syscall_slong_t"], ["shift", "int"], ["stabil", "__syscall_slong_t"], ["jitcnt", "__syscall_slong_t"], ["calcnt", "__syscall_slong_t"], ["errcnt", "__syscall_slong_t"], ["stbcnt", "__syscall_slong_t"], ["tai", "int"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"], ["32", "int :"]], "tm": [["tm_sec", "int"], ["tm_min", "int"], ["tm_hour", "int"], ["tm_mday", "int"], ["tm_mon", "int"], ["tm_year", "int"], ["tm_wday", "int"], ["tm_yday", "int"], ["tm_isdst", "int"], ["tm_gmtoff", "long int"], ["tm_zone", "const char *"]], "itimerspec": [["it_interval", "struct timespec"], ["it_value", "struct timespec"]], "__jmp_buf_tag": [["__jmpbuf", "__jmp_buf"], ["__mask_was_saved", "int"], ["__saved_mask", "__sigset_t"]], "_pthread_cleanup_buffer": [[")", "void ( * __routine ) ( void *"], ["__arg", "void *"], ["__canceltype", "int"], ["__prev", "struct _pthread_cleanup_buffer *"]], "__cancel_jmp_buf_tag": [["__cancel_jmp_buf", "__jmp_buf"], ["__mask_was_saved", "int"]], "__pthread_cleanup_frame": [[")", "void ( * __cancel_routine ) ( void *"], ["__cancel_arg", "void *"], ["__do_it", "int"], ["__cancel_type", "int"]], "_Sp_make_shared_tag": [], "__sp_array_delete": [], "_Sp_owner_less": [], "owner_less": [], "__atomic_flag_base": [["_M_i", "__atomic_flag_data_type"]], "atomic_flag": [], "_Sp_locker": [["_M_key1", "unsigned char"], ["_M_key2", "unsigned char"]], "char_traits": [], "lconv": [["decimal_point", "char *"], ["thousands_sep", "char *"], ["grouping", "char *"], ["int_curr_symbol", "char *"], ["currency_symbol", "char *"], ["mon_decimal_point", "char *"], ["mon_thousands_sep", "char *"], ["mon_grouping", "char *"], ["positive_sign", "char *"], ["negative_sign", "char *"], ["int_frac_digits", "char"], ["frac_digits", "char"], ["p_cs_precedes", "char"], ["p_sep_by_space", "char"], ["n_cs_precedes", "char"], ["n_sep_by_space", "char"], ["p_sign_posn", "char"], ["n_sign_posn", "char"], ["int_p_cs_precedes", "char"], ["int_p_sep_by_space", "char"], ["int_n_cs_precedes", "char"], ["int_n_sep_by_space", "char"], ["int_p_sign_posn", "char"], ["int_n_sign_posn", "char"]], "__sv_wrapper": [["_M_sv", "__sv_type"]], "_Alloc_hider": [["_M_p", "pointer"]], "_G_fpos_t": [["__pos", "__off_t"], ["__state", "__mbstate_t"]], "_G_fpos64_t": [["__pos", "__off64_t"], ["__state", "__mbstate_t"]], "_IO_FILE": [["_flags", "int"], ["_IO_read_ptr", "char *"], ["_IO_read_end", "char *"], ["_IO_read_base", "char *"], ["_IO_write_base", "char *"], ["_IO_write_ptr", "char *"], ["_IO_write_end", "char *"], ["_IO_buf_base", "char *"], ["_IO_buf_end", "char *"], ["_IO_save_base", "char *"], ["_IO_backup_base", "char *"], ["_IO_save_end", "char *"], ["_markers", "struct _IO_marker *"], ["_chain", "struct _IO_FILE *"], ["_fileno", "int"], ["_flags2", "int"], ["_old_offset", "__off_t"], ["_cur_column", "unsigned short"], ["_vtable_offset", "signed char"], ["]", "char _shortbuf [ 1"], ["_lock", "_IO_lock_t *"], ["_offset", "__off64_t"], ["_codecvt", "struct _IO_codecvt *"], ["_wide_data", "struct _IO_wide_data *"], ["_freeres_list", "struct _IO_FILE *"], ["_freeres_buf", "void *"], ["__pad5", "size_t"], ["_mode", "int"], ["]", "char _unused2 [ 15 * sizeof ( int ) - 4 * sizeof ( void * ) - sizeof ( size_t )"]], "_IO_cookie_io_functions_t": [["read", "cookie_read_function_t *"], ["write", "cookie_write_function_t *"], ["seek", "cookie_seek_function_t *"], ["close", "cookie_close_function_t *"]], "_Save_errno": [["_M_errno", "int"]], "_Range_chk": [], "_Guard": [["_M_guarded", "basic_string *"]], "__cow_string": [], "is_error_condition_enum": [], "is_error_code_enum": [], "_Callback_list": [["_M_next", "_Callback_list *"], ["_M_fn", "ios_base :: event_callback"], ["_M_index", "int"], ["_M_refcount", "_Atomic_word"]], "_Words": [["_M_pword", "void *"], ["_M_iword", "long"]], "ctype_base": [], "__ptr_guard": [["__p", "_CharT *"]], "__numeric_limits_base": [], "numeric_limits": [], "__time_get_state": [["1", "unsigned int _M_have_I :"], ["1", "unsigned int _M_have_wday :"], ["1", "unsigned int _M_have_yday :"], ["1", "unsigned int _M_have_mon :"], ["1", "unsigned int _M_have_mday :"], ["1", "unsigned int _M_have_uweek :"], ["1", "unsigned int _M_have_wweek :"], ["1", "unsigned int _M_have_century :"], ["1", "unsigned int _M_is_pm :"], ["1", "unsigned int _M_want_century :"], ["1", "unsigned int _M_want_xday :"], ["5", "unsigned int _M_pad1 :"], ["6", "unsigned int _M_week_no :"], ["10", "unsigned int _M_pad2 :"], ["_M_century", "int"], ["_M_pad3", "int"]], "pattern": [["]", "char field [ 4"]], "messages_base": [], "_Scoped_str": [["_M_len", "size_t"], ["_M_str", "_CharT *"]], "stat": [["st_dev", "__dev_t"], ["st_ino", "__ino_t , __ino64_t ,"], ["st_mode", "__mode_t"], ["st_nlink", "__nlink_t"], ["st_uid", "__uid_t"], ["st_gid", "__gid_t"], ["st_rdev", "__dev_t"], ["__pad1", "__dev_t"], ["st_size", "__off_t , __off64_t ,"], ["st_blksize", "__blksize_t"], ["__pad2", "int"], ["st_blocks", "__blkcnt_t , __blkcnt64_t ,"], ["st_atim", "struct timespec"], ["st_mtim", "struct timespec"], ["st_ctim", "struct timespec"], ["]", "int __glibc_reserved [ 2"]], "stat64": [["st_dev", "__dev_t"], ["st_ino", "__ino64_t"], ["st_mode", "__mode_t"], ["st_nlink", "__nlink_t"], ["st_uid", "__uid_t"], ["st_gid", "__gid_t"], ["st_rdev", "__dev_t"], ["__pad1", "__dev_t"], ["st_size", "__off64_t"], ["st_blksize", "__blksize_t"], ["__pad2", "int"], ["st_blocks", "__blkcnt64_t"], ["st_atim", "struct timespec"], ["st_mtim", "struct timespec"], ["st_ctim", "struct timespec"], ["]", "int __glibc_reserved [ 2"]], "statx_timestamp": [["tv_sec", "__s64"], ["tv_nsec", "__u32"], ["__reserved", "__s32"]], "statx": [["stx_mask", "__u32"], ["stx_blksize", "__u32"], ["stx_attributes", "__u64"], ["stx_nlink", "__u32"], ["stx_uid", "__u32"], ["stx_gid", "__u32"], ["stx_mode", "__u16"], ["]", "__u16 __spare0 [ 1"], ["stx_ino", "__u64"], ["stx_size", "__u64"], ["stx_blocks", "__u64"], ["stx_attributes_mask", "__u64"], ["stx_atime", "struct statx_timestamp"], ["stx_btime", "struct statx_timestamp"], ["stx_ctime", "struct statx_timestamp"], ["stx_mtime", "struct statx_timestamp"], ["stx_rdev_major", "__u32"], ["stx_rdev_minor", "__u32"], ["stx_dev_major", "__u32"], ["stx_dev_minor", "__u32"], ["stx_mnt_id", "__u64"], ["stx_dio_mem_align", "__u32"], ["stx_dio_offset_align", "__u32"], ["stx_subvol", "__u64"], ["stx_atomic_write_unit_min", "__u32"], ["stx_atomic_write_unit_max", "__u32"], ["stx_atomic_write_segments_max", "__u32"], ["]", "__u32 __spare1 [ 1"], ["]", "__u64 __spare3 [ 9"]], "re_pattern_buffer": [["buffer", "struct re_dfa_t * __REPB_PREFIX ("], ["allocated", "__re_long_size_t __REPB_PREFIX ("], ["used", "__re_long_size_t __REPB_PREFIX ("], ["syntax", "reg_syntax_t __REPB_PREFIX ("], ["fastmap", "char * __REPB_PREFIX ("], ["translate", "unsigned char * # ifdef __USE_GNU # define RE_TRANSLATE_TYPE __RE_TRANSLATE_TYPE # endif # endif # ifdef __USE_GNU # define __REPB_PREFIX ( name ) name # else # define __REPB_PREFIX ( name ) __ ## name # endif struct re_pattern_buffer { /* Space that holds the compiled pattern.  The type\n     'struct re_dfa_t' is private and is not declared here.  */ struct re_dfa_t * __REPB_PREFIX ( buffer ) ; /* Number of bytes to which 'buffer' points.  */ __re_long_size_t __REPB_PREFIX ( allocated ) ; /* Number of bytes actually used in 'buffer'.  */ __re_long_size_t __REPB_PREFIX ( used ) ; /* Syntax setting with which the pattern was compiled.  */ reg_syntax_t __REPB_PREFIX ( syntax ) ; /* Pointer to a fastmap, if any, otherwise zero.  re_search uses the\n     fastmap, if there is one, to skip over impossible starting points\n     for matches.  */ char * __REPB_PREFIX ( fastmap ) ; /* Either a translate table to apply to all characters before\n     comparing them, or zero for no translation.  The translation is\n     applied to a pattern when it is compiled and to a string when it\n     is matched.  */ __RE_TRANSLATE_TYPE __REPB_PREFIX ("], ["re_nsub", "size_t"], ["1", "unsigned __REPB_PREFIX ( can_be_null ) :"], ["2", "unsigned __REPB_PREFIX ( regs_allocated ) :"], ["1", "unsigned __REPB_PREFIX ( fastmap_accurate ) :"], ["1", "unsigned __REPB_PREFIX ( no_sub ) :"], ["1", "unsigned __REPB_PREFIX ( not_bol ) :"], ["1", "unsigned __REPB_PREFIX ( not_eol ) :"], ["1", "unsigned __REPB_PREFIX ( newline_anchor ) :"]], "re_registers": [["num_regs", "__re_size_t"], ["start", "regoff_t *"], ["end", "regoff_t *"]], "system_clock": [], "steady_clock": [], "__file_clock": [], "defer_lock_t": [], "try_to_lock_t": [], "adopt_lock_t": [], "__at_thread_exit_elt": [["_M_next", "__at_thread_exit_elt *"], [")", "void ( * _M_cb ) ( void *"]], "once_flag": [["__GTHREAD_ONCE_INIT", "__gthread_once_t _M_once ="]], "_Prepare_execution": [], "_Never_valueless_alt": [], "nullopt_t": [], "_Empty_byte": [], "__variant_cookie": [], "__variant_idx_cookie": [], "__cannot_match": [], "monostate": [], "__byte_operand": [], "__xfer_bufptrs": [["_M_to", "basic_stringbuf *"], ["]", "off_type _M_goff [ 3"], ["]", "off_type _M_poff [ 3"]], "atomic": [], "sigevent": [["sigev_value", "__sigval_t"], ["sigev_signo", "int"], ["sigev_notify", "int"], ["_sigev_un", "union { int _pad [ __SIGEV_PAD_SIZE ] ; /* When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the\n\t   thread to receive the signal.  */ __pid_t _tid ; struct { void ( * _function ) ( __sigval_t ) ; /* Function to start.  */ pthread_attr_t * _attribute ; /* Thread attributes.  */ } _sigev_thread ; }"]], "sigaction": [["__sigaction_handler", "union { /* Used if SA_SIGINFO is not set.  */ __sighandler_t sa_handler ; /* Used if SA_SIGINFO is set.  */ void ( * sa_sigaction ) ( int , siginfo_t * , void * ) ; }"], ["sa_mask", "__sigset_t"], ["sa_flags", "int"], [")", "void ( * sa_restorer ) ( void"]], "sigcontext": [["fault_address", "__u64"], ["]", "__u64 regs [ 31"], ["sp", "__u64"], ["pc", "__u64"], ["pstate", "__u64"], ["]", "__u8 __reserved [ 4096"]], "_aarch64_ctx": [["magic", "__u32"], ["size", "__u32"]], "fpsimd_context": [["head", "struct _aarch64_ctx"], ["fpsr", "__u32"], ["fpcr", "__u32"], ["]", "__uint128_t vregs [ 32"]], "esr_context": [["head", "struct _aarch64_ctx"], ["esr", "__u64"]], "poe_context": [["head", "struct _aarch64_ctx"], ["por_el0", "__u64"]], "extra_context": [["head", "struct _aarch64_ctx"], ["datap", "__u64"], ["size", "__u32"], ["]", "__u32 __reserved [ 3"]], "sve_context": [["head", "struct _aarch64_ctx"], ["vl", "__u16"], ["flags", "__u16"], ["]", "__u16 __reserved [ 2"]], "tpidr2_context": [["head", "struct _aarch64_ctx"], ["tpidr2", "__u64"]], "fpmr_context": [["head", "struct _aarch64_ctx"], ["fpmr", "__u64"]], "za_context": [["head", "struct _aarch64_ctx"], ["vl", "__u16"], ["]", "__u16 __reserved [ 3"]], "zt_context": [["head", "struct _aarch64_ctx"], ["nregs", "__u16"], ["]", "__u16 __reserved [ 3"]], "timezone": [["tz_minuteswest", "int"], ["tz_dsttime", "int"]], "itimerval": [["it_interval", "struct timeval"], ["it_value", "struct timeval"]], "user_regs_struct": [["]", "unsigned long long regs [ 31"], ["sp", "unsigned long long"], ["pc", "unsigned long long"], ["pstate", "unsigned long long"]], "user_fpsimd_struct": [["]", "__uint128_t vregs [ 32"], ["fpsr", "unsigned int"], ["fpcr", "unsigned int"]], "elf_siginfo": [["si_signo", "int"], ["si_code", "int"], ["si_errno", "int"]], "elf_prstatus": [["pr_info", "struct elf_siginfo"], ["pr_cursig", "short int"], ["pr_sigpend", "unsigned long int"], ["pr_sighold", "unsigned long int"], ["pr_pid", "__pid_t"], ["pr_ppid", "__pid_t"], ["pr_pgrp", "__pid_t"], ["pr_sid", "__pid_t"], ["pr_utime", "struct timeval"], ["pr_stime", "struct timeval"], ["pr_cutime", "struct timeval"], ["pr_cstime", "struct timeval"], ["pr_reg", "elf_gregset_t"], ["pr_fpvalid", "int"]], "elf_prpsinfo": [["pr_state", "char"], ["pr_sname", "char"], ["pr_zomb", "char"], ["pr_nice", "char"], ["pr_flag", "unsigned long int"], ["pr_uid", "__pr_uid_t"], ["pr_gid", "__pr_gid_t"], ["pr_pid", "int"], ["pr_ppid", "int pr_pid ,"], ["pr_pgrp", "int pr_pid , pr_ppid ,"], ["pr_sid", "int pr_pid , pr_ppid , pr_pgrp ,"], ["]", "char pr_fname [ 16"], ["]", "char pr_psargs [ ELF_PRARGSZ"]], "ucontext_t": [["uc_flags", "unsigned long __ctx ("], ["uc_link", "struct ucontext_t *"], ["uc_stack", "stack_t"], ["uc_sigmask", "sigset_t"], ["uc_mcontext", "mcontext_t"]], "sigstack": [["ss_sp", "void *"], ["ss_onstack", "int"]], "_Resetiosflags": [["_M_mask", "ios_base :: fmtflags"]], "_Setiosflags": [["_M_mask", "ios_base :: fmtflags"]], "_Setbase": [["_M_base", "int"]], "_Setprecision": [["_M_n", "int"]], "_Setw": [["_M_n", "int"]], "_Rb_tree_node_base": [["_M_color", "_Rb_tree_color"], ["_M_parent", "_Base_ptr"], ["_M_left", "_Base_ptr"], ["_M_right", "_Base_ptr"]], "_Rb_tree_header": [["_M_header", "_Rb_tree_node_base"], ["_M_node_count", "size_t"]], "_Reuse_or_alloc_node": [["_M_root", "_Base_ptr"], ["_M_nodes", "_Base_ptr"], ["_M_t", "_Rb_tree &"]], "_Alloc_node": [["_M_t", "_Rb_tree &"]], "_Auto_node": [["_M_t", "_Rb_tree &"], ["_M_node", "_Link_type"]], "None": [], "Sink": [], "CodeLocation": [["file", "std :: string"], ["line", "int"]], "DefaultNameGenerator": [], "ConstCharPtr": [["value", "const char *"]], "TrueWithString": [["value", "std :: string"]], "RelationToSourceReference": [], "RelationToSourceCopy": [], "MakeIndexSequenceImpl": [], "FlatTupleConstructTag": [], "ContainerPrinter": [], "FunctionPointerPrinter": [], "PointerPrinter": [], "LookupBlocker": [], "StreamPrinter": [], "ProtobufPrinter": [], "ConvertibleToIntegerPrinter": [], "ConvertibleToStringViewPrinter": [], "RawBytesPrinter": [], "FallbackPrinter": [], "Visitor": [["os", ":: std :: ostream *"], ["index", "std :: size_t"]], "AnyEq": [], "AnyNe": [], "AnyLt": [], "AnyGt": [], "AnyLe": [], "AnyGe": [], "SharedPayloadBase": [["}", "std :: atomic < int > ref { 1"]], "VTable": [[")", "bool ( * match_and_explain ) ( const MatcherBase & , const T & , MatchResultListener *"], [")", "void ( * describe ) ( const MatcherBase & , std :: ostream * , bool negation"], [")", "const MatcherDescriberInterface * ( * get_describer ) ( const MatcherBase &"], [")", "void ( * shared_destroy ) ( SharedPayloadBase *"]], "PrintToStringParamName": [], "MarkAsIgnored": [], "TestInfo": [["test_suite_base_name", "const std :: string"], ["test_base_name", "const std :: string"], ["test_meta_factory", "const std :: unique_ptr < TestMetaFactoryBase < ParamType >>"], ["code_location", "const CodeLocation"]], "InstantiationInfo": [["name", "std :: string"], ["generator", "GeneratorCreationFunc *"], ["name_func", "ParamNameGeneratorFunc *"], ["file", "const char *"], ["line", "int"]], "TypeParameterizedTestSuiteInfo": [["code_location", "CodeLocation"], ["instantiated", "bool"]], "Setup_should_be_spelled_SetUp": [], "faketype": [], "AssertHelperData": [["type", "TestPartResult :: Type const"], ["file", "const char * const"], ["line", "int const"], ["message", "std :: string const"]], "KindOf": [], "CallableTag": [], "ActionAdapter": [["impl_", ":: std :: shared_ptr < ActionInterface < F >>"]], "OA": [["initial_action", "Action < void ( InitialActionArgType < Args > ... ) >"], ["remaining_actions", "Action < R ( Args ... ) >"]], "State": [["values", "std :: vector < T >"], ["0", "size_t i ="]], "UserConstructorTag": [], "ExcessiveArg": [], "Holder": [["ptr", "std :: shared_ptr < Impl >"]], "__iseqsig_type": [], "LessComparator": [], "Rank1": [], "Rank0": [], "UnorderedMatcherRequire": [], "ActionAdaptor": [["once_action", "std :: shared_ptr < OnceAction < R ( Args ... ) >>"]], "__close_sentry": [["__fb", "basic_filebuf *"]], "MultiTarget": [["str", "const char *"], ["len", "size_t"], ["index", "size_t"]], "dirent": [["d_ino", "__ino_t"], ["d_off", "__off_t"], ["d_reclen", "unsigned short int"], ["d_type", "unsigned char"], ["]", "char d_name [ 256"]], "dirent64": [["d_ino", "__ino64_t"], ["d_off", "__off64_t"], ["d_reclen", "unsigned short int"], ["d_type", "unsigned char"], ["]", "char d_name [ 256"]], "flock": [["l_type", "short int"], ["l_whence", "short int"], ["l_start", "__off_t"], ["l_len", "__off_t"], ["l_pid", "__pid_t"]], "flock64": [["l_type", "short int"], ["l_whence", "short int"], ["l_start", "__off64_t"], ["l_len", "__off64_t"], ["l_pid", "__pid_t"]], "iovec": [["iov_base", "void *"], ["iov_len", "size_t"]], "f_owner_ex": [["type", "enum __pid_type"], ["pid", "__pid_t"]], "file_handle": [["handle_bytes", "unsigned int"], ["handle_type", "int"], ["]", "unsigned char f_handle [ 0"]], "control_data_s": [["]", "dma_cb_t cb [ 1"], ["]", "uint32_t sample [ NUM_DATA_WORDS"]], "Color_t": [["r", "unsigned char"], ["g", "unsigned char"], ["b", "unsigned char"]], "UplinkCmd": [["id", "uint8_t"], ["value", "uint8_t"]], "SensStatus": [["adxl_status", "uint8_t"], ["adxl_aux_status", "uint8_t"], ["bmi_accel_status", "uint8_t"], ["bmi_aux_accel_status", "uint8_t"], ["bmi_gyro_status", "uint8_t"], ["bmi_aux_gyro_status", "uint8_t"], ["bmp_status", "bmp3_status"], ["bmp_aux_status", "bmp3_status"]], "NavSensors": [["adxl", "adxl375_data"], ["adxl_aux", "adxl375_data"], ["bmi_accel", "bmi08_sensor_data_f"], ["bmi_gyro", "bmi08_sensor_data_f"], ["bmi_aux_accel", "bmi08_sensor_data_f"], ["bmi_aux_gyro", "bmi08_sensor_data_f"], ["bmp", "bmp3_data"], ["bmp_aux", "bmp3_data"]], "PropSensors": [["N2_pressure", "float"], ["fuel_pressure", "float"], ["LOX_pressure", "float"], ["igniter_pressure", "float"], ["LOX_inj_pressure", "float"], ["fuel_inj_pressure", "float"], ["chamber_pressure", "float"], ["N2_temperature", "float"], ["fuel_temperature", "float"], ["LOX_temperature", "float"], ["igniter_temperature", "float"], ["fuel_inj_temperature", "float"], ["fuel_inj_cooling_temperature", "float"], ["LOX_inj_temperature", "float"], ["chamber_temperature", "float"], ["PRB_state", "uint32_t"]], "Valves": [["valve_dpr_pressure_lox", "bool"], ["valve_dpr_pressure_fuel", "bool"], ["valve_dpr_vent_copv", "bool"], ["valve_dpr_vent_lox", "bool"], ["valve_dpr_vent_fuel", "bool"], ["valve_prb_main_lox", "bool"], ["valve_prb_main_fuel", "bool"]], "Vector3": [["x", "double"], ["y", "double"], ["z", "double"]], "GPSCoord": [["lat", "double"], ["lng", "double"], ["alt", "double"]], "GPSTime": [["year", "unsigned"], ["month", "unsigned"], ["day", "unsigned"], ["hour", "unsigned"], ["minute", "unsigned"], ["second", "unsigned"], ["centisecond", "unsigned"]], "NavigationData": [["time", "GPSTime"], ["position", "GPSCoord"], ["gnss_speed", "double"], ["position_kalman", "Vector3"], ["speed", "Vector3"], ["accel", "Vector3"], ["attitude", "Vector3"], ["course", "double"], ["altitude", "double"], ["baro", "bmp3_data"]], "Batteries": [["lpb_voltage", "float"], ["lpb_current", "float"], ["hpb_voltage", "float"], ["hpb_current", "float"]], "CamsRecording": [["cam_sep", "bool"], ["cam_up", "bool"], ["cam_down", "bool"]], "Event": [["command_updated", "bool"], ["calibrated", "bool"], ["dpr_eth_ready", "bool"], ["dpr_eth_pressure_ok", "bool"], ["dpr_lox_ready", "bool"], ["dpr_lox_pressure_ok", "bool"], ["prb_ready", "bool"], ["trb_ready", "bool"], ["ignited", "bool"], ["engine_cut_off", "bool"], ["seperated", "bool"], ["chute_unreefed", "bool"], ["ignition_failed", "bool"], ["catastrophic_failure", "bool"]], "DataDump": [["av_state", "State"], ["av_timestamp", "uint32_t"], ["telemetry_cmd", "UplinkCmd"], ["av_fc_temp", "float"], ["av_amb_temp", "float"], ["stat", "SensStatus"], ["sens", "NavSensors"], ["prop", "PropSensors"], ["valves", "Valves"], ["nav", "NavigationData"], ["bat", "Batteries"], ["cams_recording", "CamsRecording"], ["event", "Event"]], "GPSModule": [["nullptr", "I2CGPS * i2c_gps ="], ["nullptr", "TinyGPSPlus * tiny_gps ="]], "Bmp390Module": [["nullptr", "Bmp390 * bmp ="], ["stat_reg", "Data :: GoatReg"], ["data_reg", "Data :: GoatReg"], ["i2c_address", "uint32_t"]], "Tmp1075Module": [["nullptr", "TMP1075 * tmp1075 ="]], "Bmi088Module": [["nullptr", "Bmi088 * bmi ="], ["gyro_stat_reg", "Data :: GoatReg"], ["gyro_data_reg", "Data :: GoatReg"], ["accel_stat_reg", "Data :: GoatReg"], ["accel_data_reg", "Data :: GoatReg"], ["gyro_i2c_address", "uint32_t"], ["accel_i2c_address", "uint32_t"]], "INA228Module": [["nullptr", "INA228 * ina ="], ["i2c_address", "uint32_t"], ["voltage_reg", "Data :: GoatReg"], ["shunt", "float"], ["maxCurrent", "float"]], "Adxl375Module": [["nullptr", "Adxl375 * adxl ="], ["i2c_address", "uint32_t"], ["stat_reg", "Data :: GoatReg"], ["data_reg", "Data :: GoatReg"]], "_List_node_base": [["_M_next", "_List_node_base *"], ["_M_prev", "_List_node_base *"]], "_List_node_header": [["_M_size", "std :: size_t"]], "_Scratch_list": [], "_List_impl": [["_M_node", "__detail :: _List_node_header"]], "_Finalize_merge": [["_M_dest", "list &"], ["_M_src", "list &"], ["_M_next", "const iterator &"]], "bmi08_sensor_data": [["x", "int16_t"], ["y", "int16_t"], ["z", "int16_t"]], "bmi08_sensor_data_f": [["x", "float"], ["y", "float"], ["z", "float"]], "bmi08_cfg": [["power", "uint8_t"], ["range", "uint8_t"], ["bw", "uint8_t"], ["odr", "uint8_t"]], "bmi08_err_reg": [["fatal_err", "uint8_t"], ["err_code", "uint8_t"]], "bmi08_data_sync_cfg": [["mode", "uint8_t"]], "bmi08_int_pin_cfg": [["lvl", "uint8_t"], ["output_mode", "uint8_t"], ["enable_int_pin", "uint8_t"]], "bmi08_accel_int_channel_cfg": [["int_channel", "enum bmi08_accel_int_channel"], ["int_type", "enum bmi08_accel_int_types"], ["int_pin_cfg", "struct bmi08_int_pin_cfg"]], "bmi08_gyro_int_channel_cfg": [["int_channel", "enum bmi08_gyro_int_channel"], ["int_type", "enum bmi08_gyro_int_types"], ["int_pin_cfg", "struct bmi08_int_pin_cfg"]], "bmi08_int_cfg": [["accel_int_config_1", "struct bmi08_accel_int_channel_cfg"], ["accel_int_config_2", "struct bmi08_accel_int_channel_cfg"], ["gyro_int_config_1", "struct bmi08_gyro_int_channel_cfg"], ["gyro_int_config_2", "struct bmi08_gyro_int_channel_cfg"]], "bmi08_accel_fifo_config": [["mode", "uint8_t"], ["accel_en", "uint8_t"], ["int1_en", "uint8_t"], ["int2_en", "uint8_t"]], "bmi08_gyr_fifo_config": [["mode", "uint8_t"], ["data_select", "uint8_t"], ["tag", "uint8_t"], ["frame_count", "uint8_t"], ["wm_level", "uint16_t"]], "bmi08_fifo_frame": [["data", "uint8_t *"], ["length", "uint16_t"], ["acc_data_enable", "uint16_t"], ["gyr_data_enable", "uint16_t"], ["acc_byte_start_idx", "uint16_t"], ["gyr_byte_start_idx", "uint16_t"], ["sensor_time", "uint32_t"], ["skipped_frame_count", "uint8_t"], ["data_int_map", "uint8_t"], ["acc_fifo_conf", "struct bmi08_accel_fifo_config"], ["gyr_fifo_conf", "struct bmi08_gyr_fifo_config"]], "bmi08_axes_remap": [["x_axis", "uint8_t"], ["y_axis", "uint8_t"], ["z_axis", "uint8_t"], ["x_axis_sign", "uint8_t"], ["y_axis_sign", "uint8_t"], ["z_axis_sign", "uint8_t"]], "bmi08_dev": [["accel_chip_id", "uint8_t"], ["gyro_chip_id", "uint8_t"], ["intf_ptr_accel", "void *"], ["intf_ptr_gyro", "void *"], ["intf", "enum bmi08_intf"], ["variant", "enum bmi08_variant"], ["dummy_byte", "uint8_t"], ["accel_cfg", "struct bmi08_cfg"], ["gyro_cfg", "struct bmi08_cfg"], ["remap", "struct bmi08_axes_remap"], ["config_file_ptr", "const uint8_t *"], ["read_write_len", "uint16_t"], ["read", "bmi08_read_fptr_t"], ["write", "bmi08_write_fptr_t"], ["delay_us", "bmi08_delay_us_fptr_t"], ["intf_rslt", "int8_t # endif /**\n * The last error code from read/write interface is stored in the device structure as intf_rslt.\n */ # ifndef BMI08_INTF_RET_SUCCESS # define BMI08_INTF_RET_SUCCESS INT8_C ( 0 ) # endif /*************************** BMI08 Accelerometer Macros *****************************/ /** Register map */ /* Accel registers */ /**\\name    Accel Chip Id register */ # define BMI08_REG_ACCEL_CHIP_ID UINT8_C ( 0x00 ) /**\\name    Accel Error condition register */ # define BMI08_REG_ACCEL_ERR UINT8_C ( 0x02 ) /**\\name    Accel Status flag register */ # define BMI08_REG_ACCEL_STATUS UINT8_C ( 0x03 ) /**\\name    Accel X LSB data register */ # define BMI08_REG_ACCEL_X_LSB UINT8_C ( 0x12 ) /**\\name    Accel X MSB data register */ # define BMI08_REG_ACCEL_X_MSB UINT8_C ( 0x13 ) /**\\name    Accel Y LSB data register */ # define BMI08_REG_ACCEL_Y_LSB UINT8_C ( 0x14 ) /**\\name    Accel Y MSB data register */ # define BMI08_REG_ACCEL_Y_MSB UINT8_C ( 0x15 ) /**\\name    Accel Z LSB data register */ # define BMI08_REG_ACCEL_Z_LSB UINT8_C ( 0x16 ) /**\\name    Accel Z MSB data register */ # define BMI08_REG_ACCEL_Z_MSB UINT8_C ( 0x17 ) /**\\name    Sensor time byte 0 register */ # define BMI08_REG_ACCEL_SENSORTIME_0 UINT8_C ( 0x18 ) /**\\name    Sensor time byte 1 register */ # define BMI08_REG_ACCEL_SENSORTIME_1 UINT8_C ( 0x19 ) /**\\name    Sensor time byte 2 register */ # define BMI08_REG_ACCEL_SENSORTIME_2 UINT8_C ( 0x1A ) /**\\name    Accel Interrupt status0 register */ # define BMI08_REG_ACCEL_INT_STAT_0 UINT8_C ( 0x1C ) /**\\name    Accel Interrupt status1 register */ # define BMI08_REG_ACCEL_INT_STAT_1 UINT8_C ( 0x1D ) /**\\name    Accel general purpose register 0*/ # define BMI08_REG_ACCEL_GP_0 UINT8_C ( 0x1E ) /**\\name    Sensor temperature MSB data register */ # define BMI08_REG_TEMP_MSB UINT8_C ( 0x22 ) /**\\name    Sensor temperature LSB data register */ # define BMI08_REG_TEMP_LSB UINT8_C ( 0x23 ) /**\\name    Accel general purpose register 4*/ # define BMI08_REG_ACCEL_GP_4 UINT8_C ( 0x27 ) /**\\name    Accel Internal status register */ # define BMI08_REG_ACCEL_INTERNAL_STAT UINT8_C ( 0x2A ) /**\\name    Accel configuration register */ # define BMI08_REG_ACCEL_CONF UINT8_C ( 0x40 ) /**\\name    Accel range setting register */ # define BMI08_REG_ACCEL_RANGE UINT8_C ( 0x41 ) /**\\name    Accel Interrupt pin 1 configuration register */ # define BMI08_REG_ACCEL_INT1_IO_CONF UINT8_C ( 0x53 ) /**\\name    Accel Interrupt pin 2 configuration register */ # define BMI08_REG_ACCEL_INT2_IO_CONF UINT8_C ( 0x54 ) /**\\name    Accel Interrupt latch configuration register */ # define BMI08_REG_ACCEL_INT_LATCH_CONF UINT8_C ( 0x55 ) /**\\name    Accel Interrupt pin1 mapping register */ # define BMI08_REG_ACCEL_INT1_MAP UINT8_C ( 0x56 ) /**\\name    Accel Interrupt pin2 mapping register */ # define BMI08_REG_ACCEL_INT2_MAP UINT8_C ( 0x57 ) /**\\name    Accel Interrupt map register */ # define BMI08_REG_ACCEL_INT1_INT2_MAP_DATA UINT8_C ( 0x58 ) /**\\name    Accel Init control register */ # define BMI08_REG_ACCEL_INIT_CTRL UINT8_C ( 0x59 ) /**\\name    Accel Self test register */ # define BMI08_REG_ACCEL_SELF_TEST UINT8_C ( 0x6D ) /**\\name    Accel watchdog register */ # define BMI08_REG_ACCEL_WDT UINT8_C ( 0x70 ) /**\\name    Accel Power mode configuration register */ # define BMI08_REG_ACCEL_PWR_CONF UINT8_C ( 0x7C ) /**\\name    Accel Power control (switch on or off ) register */ # define BMI08_REG_ACCEL_PWR_CTRL UINT8_C ( 0x7D ) /**\\name    Accel Soft reset register */ # define BMI08_REG_ACCEL_SOFTRESET UINT8_C ( 0x7E ) /**\\name    Feature Config related Registers */ # define BMI08_REG_ACCEL_RESERVED_5B UINT8_C ( 0x5B ) # define BMI08_REG_ACCEL_RESERVED_5C UINT8_C ( 0x5C ) # define BMI08_REG_ACCEL_FEATURE_CFG UINT8_C ( 0x5E ) /**\\name    Accel I2C slave address */ # define BMI08_ACCEL_I2C_ADDR_PRIMARY UINT8_C ( 0x18 ) # define BMI08_ACCEL_I2C_ADDR_SECONDARY UINT8_C ( 0x19 ) /**\\name    Interrupt masks */ # define BMI08_ACCEL_DATA_READY_INT UINT8_C ( 0x80 ) # define BMI08_ACCEL_FIFO_WM_INT UINT8_C ( 0x02 ) # define BMI08_ACCEL_FIFO_FULL_INT UINT8_C ( 0x01 ) # define BMI08_GYRO_DATA_READY_INT UINT8_C ( 0x80 ) # define BMI08_GYRO_FIFO_WM_INT UINT8_C ( 0x10 ) # define BMI08_GYRO_FIFO_FULL_INT UINT8_C ( 0x10 ) /**\\name    Initialization status */ # define BMI08_INIT_NOT_OK UINT8_C ( 0x00 ) # define BMI08_INIT_OK UINT8_C ( 0x01 ) /**\\name    Accel Bandwidth */ # define BMI08_ACCEL_BW_OSR4 UINT8_C ( 0x08 ) # define BMI08_ACCEL_BW_OSR2 UINT8_C ( 0x09 ) # define BMI08_ACCEL_BW_NORMAL UINT8_C ( 0x0A ) /**\\name    Accel Output data rate */ # define BMI08_ACCEL_ODR_12_5_HZ UINT8_C ( 0x05 ) # define BMI08_ACCEL_ODR_25_HZ UINT8_C ( 0x06 ) # define BMI08_ACCEL_ODR_50_HZ UINT8_C ( 0x07 ) # define BMI08_ACCEL_ODR_100_HZ UINT8_C ( 0x08 ) # define BMI08_ACCEL_ODR_200_HZ UINT8_C ( 0x09 ) # define BMI08_ACCEL_ODR_400_HZ UINT8_C ( 0x0A ) # define BMI08_ACCEL_ODR_800_HZ UINT8_C ( 0x0B ) # define BMI08_ACCEL_ODR_1600_HZ UINT8_C ( 0x0C ) /**\\name    Accel Self test */ # define BMI08_ACCEL_SWITCH_OFF_SELF_TEST UINT8_C ( 0x00 ) # define BMI08_ACCEL_POSITIVE_SELF_TEST UINT8_C ( 0x0D ) # define BMI08_ACCEL_NEGATIVE_SELF_TEST UINT8_C ( 0x09 ) /**\\name    Accel Power mode */ # define BMI08_ACCEL_PM_ACTIVE UINT8_C ( 0x00 ) # define BMI08_ACCEL_PM_SUSPEND UINT8_C ( 0x03 ) /**\\name    Accel Power control settings */ # define BMI08_ACCEL_POWER_DISABLE UINT8_C ( 0x00 ) # define BMI08_ACCEL_POWER_ENABLE UINT8_C ( 0x04 ) /**\\name    Accel internal interrupt pin mapping */ # define BMI08_ACCEL_DATA_SYNC_INT_DISABLE UINT8_C ( 0x00 ) # define BMI08_ACCEL_DATA_SYNC_INT_ENABLE UINT8_C ( 0x01 ) /**\\name    Accel Soft reset delay */ # define BMI08_ACCEL_SOFTRESET_DELAY_MS UINT8_C ( 1 ) /**\\name    Mask definitions for ACCEL_ERR_REG register */ # define BMI08_FATAL_ERR_MASK UINT8_C ( 0x01 ) # define BMI08_ERR_CODE_MASK UINT8_C ( 0x1C ) /**\\name    Position definitions for ACCEL_ERR_REG register */ # define BMI08_CMD_ERR_POS UINT8_C ( 1 ) # define BMI08_ERR_CODE_POS UINT8_C ( 2 ) /**\\name    Mask definition for ACCEL_STATUS_REG register */ # define BMI08_ACCEL_STATUS_MASK UINT8_C ( 0x80 ) /**\\name    Position definitions for ACCEL_STATUS_REG  */ # define BMI08_ACCEL_STATUS_POS UINT8_C ( 7 ) /**\\name    Mask definitions for odr, bandwidth and range */ # define BMI08_ACCEL_ODR_MASK UINT8_C ( 0x0F ) # define BMI08_ACCEL_BW_MASK UINT8_C ( 0xF0 ) # define BMI08_ACCEL_RANGE_MASK UINT8_C ( 0x03 ) /**\\name    Position definitions for odr, bandwidth and range */ # define BMI08_ACCEL_BW_POS UINT8_C ( 4 ) /**\\name    Mask definitions for INT1_IO_CONF register */ # define BMI08_ACCEL_INT_EDGE_MASK UINT8_C ( 0x01 ) # define BMI08_ACCEL_INT_LVL_MASK UINT8_C ( 0x02 ) # define BMI08_ACCEL_INT_OD_MASK UINT8_C ( 0x04 ) # define BMI08_ACCEL_INT_IO_MASK UINT8_C ( 0x08 ) # define BMI08_ACCEL_INT_IN_MASK UINT8_C ( 0x10 ) /**\\name    Position definitions for INT1_IO_CONF register */ # define BMI08_ACCEL_INT_EDGE_POS UINT8_C ( 0 ) # define BMI08_ACCEL_INT_LVL_POS UINT8_C ( 1 ) # define BMI08_ACCEL_INT_OD_POS UINT8_C ( 2 ) # define BMI08_ACCEL_INT_IO_POS UINT8_C ( 3 ) # define BMI08_ACCEL_INT_IN_POS UINT8_C ( 4 ) /**\\name    Mask definitions for INT1/INT2 mapping register */ # define BMI08_ACCEL_MAP_INTA_MASK UINT8_C ( 0x01 ) /**\\name    Mask definitions for INT1/INT2 mapping register */ # define BMI08_ACCEL_MAP_INTA_POS UINT8_C ( 0x00 ) /**\\name    Mask definitions for INT1_INT2_MAP_DATA register */ # define BMI08_ACCEL_INT1_DRDY_MASK UINT8_C ( 0x04 ) # define BMI08_ACCEL_INT2_DRDY_MASK UINT8_C ( 0x40 ) /**\\name    Position definitions for INT1_INT2_MAP_DATA register */ # define BMI08_ACCEL_INT1_DRDY_POS UINT8_C ( 2 ) # define BMI08_ACCEL_INT2_DRDY_POS UINT8_C ( 6 ) /**\\name    Asic Initialization value */ # define BMI08_ASIC_INITIALIZED UINT8_C ( 0x01 ) /*************************** BMI08 Gyroscope Macros *****************************/ /** Register map */ /* Gyro registers */ /**\\name    Gyro Chip Id register */ # define BMI08_REG_GYRO_CHIP_ID UINT8_C ( 0x00 ) /**\\name    Gyro X LSB data register */ # define BMI08_REG_GYRO_X_LSB UINT8_C ( 0x02 ) /**\\name    Gyro X MSB data register */ # define BMI08_REG_GYRO_X_MSB UINT8_C ( 0x03 ) /**\\name    Gyro Y LSB data register */ # define BMI08_REG_GYRO_Y_LSB UINT8_C ( 0x04 ) /**\\name    Gyro Y MSB data register */ # define BMI08_REG_GYRO_Y_MSB UINT8_C ( 0x05 ) /**\\name    Gyro Z LSB data register */ # define BMI08_REG_GYRO_Z_LSB UINT8_C ( 0x06 ) /**\\name    Gyro Z MSB data register */ # define BMI08_REG_GYRO_Z_MSB UINT8_C ( 0x07 ) /**\\name    Gyro Interrupt status register */ # define BMI08_REG_GYRO_INT_STAT_1 UINT8_C ( 0x0A ) /**\\name    Gyro FIFO status register */ # define BMI08_REG_GYRO_FIFO_STATUS UINT8_C ( 0x0E ) /**\\name    Gyro Range register */ # define BMI08_REG_GYRO_RANGE UINT8_C ( 0x0F ) /**\\name    Gyro Bandwidth register */ # define BMI08_REG_GYRO_BANDWIDTH UINT8_C ( 0x10 ) /**\\name    Gyro Power register */ # define BMI08_REG_GYRO_LPM1 UINT8_C ( 0x11 ) /**\\name    Gyro Soft reset register */ # define BMI08_REG_GYRO_SOFTRESET UINT8_C ( 0x14 ) /**\\name    Gyro Interrupt control register */ # define BMI08_REG_GYRO_INT_CTRL UINT8_C ( 0x15 ) /**\\name    Gyro Interrupt Pin configuration register */ # define BMI08_REG_GYRO_INT3_INT4_IO_CONF UINT8_C ( 0x16 ) /**\\name    Gyro Interrupt Map register */ # define BMI08_REG_GYRO_INT3_INT4_IO_MAP UINT8_C ( 0x18 ) /**\\name    Gyro FIFO watermark enable register */ # define BMI08_REG_GYRO_FIFO_WM_ENABLE UINT8_C ( 0x1E ) /**\\name    Gyro watchdog register */ # define BMI08_REG_GYRO_WDT UINT8_C ( 0x34 ) /**\\name    Gyro Self test register */ # define BMI08_REG_GYRO_SELF_TEST UINT8_C ( 0x3C ) /**\\name    Gyro Fifo Config 0 register */ # define BMI08_REG_GYRO_FIFO_CONFIG0 UINT8_C ( 0x3D ) /**\\name    Gyro Fifo Config 1 register */ # define BMI08_REG_GYRO_FIFO_CONFIG1 UINT8_C ( 0x3E ) /**\\name    Gyro Fifo Data register */ # define BMI08_REG_GYRO_FIFO_DATA UINT8_C ( 0x3F ) /**\\name    Gyro unique chip identifier */ # define BMI08_GYRO_CHIP_ID UINT8_C ( 0x0F ) /**\\name    Gyro I2C slave address */ # define BMI08_GYRO_I2C_ADDR_PRIMARY UINT8_C ( 0x68 ) # define BMI08_GYRO_I2C_ADDR_SECONDARY UINT8_C ( 0x69 ) /**\\name    Gyro Range */ # define BMI08_GYRO_RANGE_2000_DPS UINT8_C ( 0x00 ) # define BMI08_GYRO_RANGE_1000_DPS UINT8_C ( 0x01 ) # define BMI08_GYRO_RANGE_500_DPS UINT8_C ( 0x02 ) # define BMI08_GYRO_RANGE_250_DPS UINT8_C ( 0x03 ) # define BMI08_GYRO_RANGE_125_DPS UINT8_C ( 0x04 ) /**\\name    Gyro Output data rate and bandwidth */ # define BMI08_GYRO_BW_532_ODR_2000_HZ UINT8_C ( 0x00 ) # define BMI08_GYRO_BW_230_ODR_2000_HZ UINT8_C ( 0x01 ) # define BMI08_GYRO_BW_116_ODR_1000_HZ UINT8_C ( 0x02 ) # define BMI08_GYRO_BW_47_ODR_400_HZ UINT8_C ( 0x03 ) # define BMI08_GYRO_BW_23_ODR_200_HZ UINT8_C ( 0x04 ) # define BMI08_GYRO_BW_12_ODR_100_HZ UINT8_C ( 0x05 ) # define BMI08_GYRO_BW_64_ODR_200_HZ UINT8_C ( 0x06 ) # define BMI08_GYRO_BW_32_ODR_100_HZ UINT8_C ( 0x07 ) # define BMI08_GYRO_ODR_RESET_VAL UINT8_C ( 0x80 ) /**\\name    Gyro Power mode */ # define BMI08_GYRO_PM_NORMAL UINT8_C ( 0x00 ) # define BMI08_GYRO_PM_DEEP_SUSPEND UINT8_C ( 0x20 ) # define BMI08_GYRO_PM_SUSPEND UINT8_C ( 0x80 ) /**\\name    Gyro data ready interrupt enable value */ # define BMI08_GYRO_DRDY_INT_DISABLE_VAL UINT8_C ( 0x00 ) # define BMI08_GYRO_DRDY_INT_ENABLE_VAL UINT8_C ( 0x80 ) # define BMI08_GYRO_FIFO_INT_DISABLE_VAL UINT8_C ( 0x00 ) # define BMI08_GYRO_FIFO_INT_ENABLE_VAL UINT8_C ( 0x40 ) # define BMI08_GYRO_FIFO_WM_ENABLE_VAL UINT8_C ( 0x80 ) # define BMI08_GYRO_FIFO_WM_DISABLE_VAL UINT8_C ( 0x00 ) /**\\name    Gyro data ready map values */ # define BMI08_GYRO_MAP_DRDY_TO_INT3 UINT8_C ( 0x01 ) # define BMI08_GYRO_MAP_DRDY_TO_INT4 UINT8_C ( 0x80 ) # define BMI08_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4 UINT8_C ( 0x81 ) # define BMI08_GYRO_MAP_FIFO_INT3 UINT8_C ( 0x04 ) # define BMI08_GYRO_MAP_FIFO_INT4 UINT8_C ( 0x20 ) # define BMI08_GYRO_MAP_FIFO_BOTH_INT3_INT4 UINT8_C ( 0x24 ) /**\\name    Gyro Soft reset delay */ # define BMI08_GYRO_SOFTRESET_DELAY UINT8_C ( 30 ) /**\\name    Gyro power mode config delay */ # define BMI08_GYRO_POWER_MODE_CONFIG_DELAY UINT8_C ( 30 ) /** Mask definitions for range, bandwidth and power */ # define BMI08_GYRO_RANGE_MASK UINT8_C ( 0x07 ) # define BMI08_GYRO_BW_MASK UINT8_C ( 0x0F ) # define BMI08_GYRO_POWER_MASK UINT8_C ( 0xA0 ) /** Position definitions for range, bandwidth and power */ # define BMI08_GYRO_POWER_POS UINT8_C ( 5 ) /**\\name    Mask definitions for BMI08_GYRO_INT_CTRL_REG register */ # define BMI08_GYRO_DATA_EN_MASK UINT8_C ( 0x80 ) /**\\name    Position definitions for BMI08_GYRO_INT_CTRL_REG register */ # define BMI08_GYRO_DATA_EN_POS UINT8_C ( 7 ) /**\\name    Mask definitions for BMI08_GYRO_INT3_INT4_IO_CONF_REG register */ # define BMI08_GYRO_INT3_LVL_MASK UINT8_C ( 0x01 ) # define BMI08_GYRO_INT3_OD_MASK UINT8_C ( 0x02 ) # define BMI08_GYRO_INT4_LVL_MASK UINT8_C ( 0x04 ) # define BMI08_GYRO_INT4_OD_MASK UINT8_C ( 0x08 ) /**\\name    Position definitions for BMI08_GYRO_INT3_INT4_IO_CONF_REG register */ # define BMI08_GYRO_INT3_OD_POS UINT8_C ( 1 ) # define BMI08_GYRO_INT4_LVL_POS UINT8_C ( 2 ) # define BMI08_GYRO_INT4_OD_POS UINT8_C ( 3 ) /**\\name    Mask definitions for BMI08_GYRO_INT_EN_REG register */ # define BMI08_GYRO_INT_EN_MASK UINT8_C ( 0x80 ) /**\\name    Position definitions for BMI08_GYRO_INT_EN_REG register */ # define BMI08_GYRO_INT_EN_POS UINT8_C ( 7 ) /**\\name    Mask definitions for BMI088_GYRO_INT_MAP_REG register */ # define BMI08_GYRO_INT3_MAP_MASK UINT8_C ( 0x01 ) # define BMI08_GYRO_INT4_MAP_MASK UINT8_C ( 0x80 ) /**\\name    Position definitions for BMI088_GYRO_INT_MAP_REG register */ # define BMI08_GYRO_INT3_MAP_POS UINT8_C ( 0 ) # define BMI08_GYRO_INT4_MAP_POS UINT8_C ( 7 ) /**\\name    Mask definitions for BMI088_GYRO_INT_MAP_REG register */ # define BMI088_GYRO_INT3_MAP_MASK UINT8_C ( 0x01 ) # define BMI088_GYRO_INT4_MAP_MASK UINT8_C ( 0x80 ) /**\\name    Position definitions for BMI088_GYRO_INT_MAP_REG register */ # define BMI088_GYRO_INT3_MAP_POS UINT8_C ( 0 ) # define BMI088_GYRO_INT4_MAP_POS UINT8_C ( 7 ) /**\\name    Mask definitions for GYRO_SELF_TEST register */ # define BMI08_GYRO_SELF_TEST_EN_MASK UINT8_C ( 0x01 ) # define BMI08_GYRO_SELF_TEST_RDY_MASK UINT8_C ( 0x02 ) # define BMI08_GYRO_SELF_TEST_RESULT_MASK UINT8_C ( 0x04 ) # define BMI08_GYRO_SELF_TEST_FUNCTION_MASK UINT8_C ( 0x08 ) /**\\name    Position definitions for GYRO_SELF_TEST register */ # define BMI08_GYRO_SELF_TEST_RDY_POS UINT8_C ( 1 ) # define BMI08_GYRO_SELF_TEST_RESULT_POS UINT8_C ( 2 ) # define BMI08_GYRO_SELF_TEST_FUNCTION_POS UINT8_C ( 3 ) /**\\name    Gyro Fifo configurations */ # define BMI08_GYRO_FIFO_OVERRUN_MASK UINT8_C ( 0x80 ) # define BMI08_GYRO_FIFO_OVERRUN_POS UINT8_C ( 0x07 ) # define BMI08_GYRO_FIFO_MODE_MASK UINT8_C ( 0xC0 ) # define BMI08_GYRO_FIFO_MODE_POS UINT8_C ( 0x06 ) # define BMI08_GYRO_FIFO_TAG_MASK UINT8_C ( 0x80 ) # define BMI08_GYRO_FIFO_TAG_POS UINT8_C ( 0x07 ) # define BMI08_GYRO_FIFO_DATA_SELECT_MASK UINT8_C ( 0x03 ) # define BMI08_GYRO_FIFO_FRAME_COUNT_MASK UINT8_C ( 0x7F ) # define BMI08_GYRO_FIFO_WM_LEVEL_MASK UINT8_C ( 0x7F ) /*! @name Gyro Fifo interrupt map */ # define BMI08_GYRO_FIFO_INT3_MASK UINT8_C ( 0x04 ) # define BMI08_GYRO_FIFO_INT3_POS UINT8_C ( 0x02 ) # define BMI08_GYRO_FIFO_INT4_MASK UINT8_C ( 0x20 ) # define BMI08_GYRO_FIFO_INT4_POS UINT8_C ( 0x05 ) /**\\name   Gyro FIFO definitions */ # define BMI08_GYRO_FIFO_TAG_ENABLED UINT8_C ( 0x01 ) # define BMI08_GYRO_FIFO_TAG_DISABLED UINT8_C ( 0x00 ) # define BMI08_GYRO_FIFO_MODE_BYPASS UINT8_C ( 0x00 ) # define BMI08_GYRO_FIFO_MODE UINT8_C ( 0x01 ) # define BMI08_GYRO_FIFO_MODE_STREAM UINT8_C ( 0x02 ) # define BMI08_GYRO_FIFO_XYZ_AXIS_ENABLED UINT8_C ( 0x00 ) # define BMI08_GYRO_FIFO_X_AXIS_ENABLED UINT8_C ( 0x01 ) # define BMI08_GYRO_FIFO_Y_AXIS_ENABLED UINT8_C ( 0x02 ) # define BMI08_GYRO_FIFO_Z_AXIS_ENABLED UINT8_C ( 0x03 ) # define BMI08_GYRO_FIFO_XYZ_AXIS_FRAME_SIZE UINT8_C ( 0x06 ) # define BMI08_GYRO_FIFO_SINGLE_AXIS_FRAME_SIZE UINT8_C ( 0x02 ) # define BMI08_GYRO_FIFO_1KB_BUFFER UINT16_C ( 1024 ) /*************************** Common Macros for both Accel and Gyro *****************************/ /**\\name    SPI read/write mask to configure address */ # define BMI08_SPI_RD_MASK UINT8_C ( 0x80 ) # define BMI08_SPI_WR_MASK UINT8_C ( 0x7F ) /**\\name API success code */ # define BMI08_OK INT8_C ( 0 ) /**\\name API error codes */ # define BMI08_E_NULL_PTR INT8_C ( - 1 ) # define BMI08_E_COM_FAIL INT8_C ( - 2 ) # define BMI08_E_DEV_NOT_FOUND INT8_C ( - 3 ) # define BMI08_E_OUT_OF_RANGE INT8_C ( - 4 ) # define BMI08_E_INVALID_INPUT INT8_C ( - 5 ) # define BMI08_E_CONFIG_STREAM_ERROR INT8_C ( - 6 ) # define BMI08_E_RD_WR_LENGTH_INVALID INT8_C ( - 7 ) # define BMI08_E_INVALID_CONFIG INT8_C ( - 8 ) # define BMI08_E_FEATURE_NOT_SUPPORTED INT8_C ( - 9 ) # define BMI08_E_SELF_TEST_FAIL INT8_C ( - 10 ) /***\\name    Soft reset Value */ # define BMI08_SOFT_RESET_CMD UINT8_C ( 0xB6 ) /**\\name    Enable/disable macros */ # define BMI08_DISABLE UINT8_C ( 0 ) # define BMI08_ENABLE UINT8_C ( 1 ) /**\\name  To define warnings for FIFO activity */ # define BMI08_W_FIFO_EMPTY INT8_C ( 1 ) # define BMI08_W_PARTIAL_READ INT8_C ( 2 ) /**\\name  Maximum length to read */ # define BMI08_MAX_LEN UINT8_C ( 128 ) /**\\name  Sensortime resolution in seconds */ # define BMI08_SENSORTIME_RESOLUTION 0.0000390625f /**\\name    Constant values macros */ # define BMI08_SENSOR_DATA_SYNC_TIME_MS UINT8_C ( 1 ) # define BMI08_DELAY_BETWEEN_WRITES_MS UINT8_C ( 1 ) # define BMI08_SELF_TEST_DELAY_MS UINT8_C ( 3 ) # define BMI08_POWER_CONFIG_DELAY UINT8_C ( 5 ) # define BMI08_GYRO_SET_CONFIG_DELAY UINT8_C ( 10 ) # define BMI08_SENSOR_SETTLE_TIME_MS UINT8_C ( 30 ) # define BMI08_SET_ACCEL_CONF_DELAY UINT8_C ( 40 ) # define BMI08_SELF_TEST_DATA_READ_MS UINT8_C ( 50 ) # define BMI08_ASIC_INIT_TIME_MS UINT8_C ( 150 ) # define BMI08_CONFIG_STREAM_SIZE UINT16_C ( 6144 ) /**\\name    Sensor time array parameter definitions */ # define BMI08_SENSOR_TIME_MSB_BYTE UINT8_C ( 2 ) # define BMI08_SENSOR_TIME_XLSB_BYTE UINT8_C ( 1 ) # define BMI08_SENSOR_TIME_LSB_BYTE UINT8_C ( 0 ) /**\\name   int pin active state */ # define BMI08_INT_ACTIVE_LOW UINT8_C ( 0 ) # define BMI08_INT_ACTIVE_HIGH UINT8_C ( 1 ) /**\\name   interrupt pin output definition  */ # define BMI08_INT_MODE_PUSH_PULL UINT8_C ( 0 ) # define BMI08_INT_MODE_OPEN_DRAIN UINT8_C ( 1 ) /**\\name    Sensor bit resolution */ # define BMI08_16_BIT_RESOLUTION UINT8_C ( 16 ) /**\\name    Convert milliseconds to microseconds */ # define BMI08_MS_TO_US ( X ) UINT32_C ( X * 1000 ) /*********************************BMI08 FIFO Macros**********************************/ /** Register map */ /*! @name FIFO Header Mask definitions */ # define BMI08_FIFO_HEADER_ACC_FRM UINT8_C ( 0x84 ) # define BMI08_FIFO_HEADER_ALL_FRM UINT8_C ( 0x9C ) # define BMI08_FIFO_HEADER_SENS_TIME_FRM UINT8_C ( 0x44 ) # define BMI08_FIFO_HEADER_SKIP_FRM UINT8_C ( 0x40 ) # define BMI08_FIFO_HEADER_INPUT_CFG_FRM UINT8_C ( 0x48 ) # define BMI08_FIFO_HEAD_OVER_READ_MSB UINT8_C ( 0x80 ) # define BMI08_FIFO_SAMPLE_DROP_FRM UINT8_C ( 0x50 ) /* Accel registers */ # define BMI08_FIFO_LENGTH_0_ADDR UINT8_C ( 0x24 ) # define BMI08_FIFO_LENGTH_1_ADDR UINT8_C ( 0x25 ) # define BMI08_FIFO_DATA_ADDR UINT8_C ( 0x26 ) # define BMI08_FIFO_DOWNS_ADDR UINT8_C ( 0x45 ) # define BMI08_FIFO_WTM_0_ADDR UINT8_C ( 0x46 ) # define BMI08_FIFO_WTM_1_ADDR UINT8_C ( 0x47 ) # define BMI08_FIFO_CONFIG_0_ADDR UINT8_C ( 0x48 ) # define BMI08_FIFO_CONFIG_1_ADDR UINT8_C ( 0x49 ) /*! @name FIFO sensor data lengths */ # define BMI08_FIFO_ACCEL_LENGTH UINT8_C ( 6 ) # define BMI08_FIFO_WTM_LENGTH UINT8_C ( 2 ) # define BMI08_FIFO_LENGTH_MSB_BYTE UINT8_C ( 1 ) # define BMI08_FIFO_DATA_LENGTH UINT8_C ( 2 ) # define BMI08_FIFO_CONFIG_LENGTH UINT8_C ( 2 ) # define BMI08_SENSOR_TIME_LENGTH UINT8_C ( 3 ) # define BMI08_FIFO_SKIP_FRM_LENGTH UINT8_C ( 1 ) # define BMI08_FIFO_INPUT_CFG_LENGTH UINT8_C ( 1 ) /*! @name FIFO byte counter mask definition */ # define BMI08_FIFO_BYTE_COUNTER_MSB_MASK UINT8_C ( 0x3F ) /*! @name FIFO frame masks */ # define BMI08_FIFO_LSB_CONFIG_CHECK UINT8_C ( 0x00 ) # define BMI08_FIFO_MSB_CONFIG_CHECK UINT8_C ( 0x80 ) # define BMI08_FIFO_INTR_MASK UINT8_C ( 0x5C ) /*name FIFO config modes */ # define BMI08_ACC_STREAM_MODE UINT8_C ( 0x00 ) # define BMI08_ACC_FIFO_MODE UINT8_C ( 0x01 ) /*name Mask definitions for FIFO configuration modes */ # define BMI08_ACC_FIFO_MODE_CONFIG_MASK UINT8_C ( 0x01 ) /*! @name Mask definitions for FIFO_CONFIG_1 register */ # define BMI08_ACCEL_EN_MASK UINT8_C ( 0x40 ) # define BMI08_ACCEL_INT1_EN_MASK UINT8_C ( 0x08 ) # define BMI08_ACCEL_INT2_EN_MASK UINT8_C ( 0x04 ) /*name Position definitions for FIFO_CONFIG_1 register */ # define BMI08_ACCEL_EN_POS UINT8_C ( 6 ) # define BMI08_ACCEL_INT1_EN_POS UINT8_C ( 3 ) # define BMI08_ACCEL_INT2_EN_POS UINT8_C ( 2 ) /*! @name Position definitions for FIFO_DOWNS register */ # define BMI08_ACC_FIFO_DOWNS_MASK UINT8_C ( 0xF0 ) /*! @name FIFO down sampling bit positions */ # define BMI08_ACC_FIFO_DOWNS_POS UINT8_C ( 0x04 ) /*! @name Watch-dog bit positions */ # define BMI08_I2C_WDT_SEL_MASK UINT8_C ( 0x02 ) # define BMI08_I2C_WDT_SEL_POS UINT8_C ( 1 ) # define BMI08_I2C_WDT_EN_MASK UINT8_C ( 0x04 ) # define BMI08_I2C_WDT_EN_POS UINT8_C ( 2 ) /*! @name FIFO down sampling user macros */ # define BMI08_ACC_FIFO_DOWN_SAMPLE_0 UINT8_C ( 0 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_1 UINT8_C ( 1 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_2 UINT8_C ( 2 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_3 UINT8_C ( 3 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_4 UINT8_C ( 4 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_5 UINT8_C ( 5 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_6 UINT8_C ( 6 ) # define BMI08_ACC_FIFO_DOWN_SAMPLE_7 UINT8_C ( 7 ) /*! @name Mask definitions for INT1_INT2_MAP_DATA register */ # define BMI08_ACCEL_INT2_FWM_MASK UINT8_C ( 0x20 ) # define BMI08_ACCEL_INT2_FFULL_MASK UINT8_C ( 0x10 ) # define BMI08_ACCEL_INT1_FWM_MASK UINT8_C ( 0x02 ) # define BMI08_ACCEL_INT1_FFULL_MASK UINT8_C ( 0x01 ) /*! @name Positions definitions for INT1_INT2_MAP_DATA register */ # define BMI08_ACCEL_INT1_FWM_POS UINT8_C ( 1 ) # define BMI08_ACCEL_INT2_FFULL_POS UINT8_C ( 4 ) # define BMI08_ACCEL_INT2_FWM_POS UINT8_C ( 5 ) /*! @name Accel Data sync */ # define BMI08_ACCEL_DATA_SYNC_ADR UINT8_C ( 0x02 ) # define BMI08_ACCEL_DATA_SYNC_LEN UINT8_C ( 1 ) # define BMI08_ACCEL_DATA_SYNC_MODE_MASK UINT16_C ( 0x0003 ) # define BMI08_ACCEL_DATA_SYNC_MODE_SHIFT UINT8_C ( 0 ) # define BMI08_ACCEL_DATA_SYNC_MODE_OFF UINT8_C ( 0x00 ) # define BMI08_ACCEL_DATA_SYNC_MODE_400HZ UINT8_C ( 0x01 ) # define BMI08_ACCEL_DATA_SYNC_MODE_1000HZ UINT8_C ( 0x02 ) # define BMI08_ACCEL_DATA_SYNC_MODE_2000HZ UINT8_C ( 0x03 ) /**\\name    Absolute value */ # ifndef BMI08_ABS # define BMI08_ABS ( a ) ( ( a ) > 0 ? ( a ) : - ( a ) ) # endif /**\\name    Utility Macros  */ # define BMI08_SET_LOW_BYTE UINT16_C ( 0x00FF ) # define BMI08_SET_HIGH_BYTE UINT16_C ( 0xFF00 ) # define BMI08_SET_LOW_NIBBLE UINT8_C ( 0x0F ) /**\\name Macro to SET and GET BITS of a register */ # define BMI08_SET_BITS ( reg_var , bitname , val ) ( ( reg_var & ~ ( bitname ## _MASK ) ) | ( ( val << bitname ## _POS ) & bitname ## _MASK ) ) # define BMI08_GET_BITS ( reg_var , bitname ) ( ( reg_var & ( bitname ## _MASK ) ) >> ( bitname ## _POS ) ) # define BMI08_SET_BITS_POS_0 ( reg_var , bitname , val ) ( ( reg_var & ~ ( bitname ## _MASK ) ) | ( val & bitname ## _MASK ) ) # define BMI08_GET_BITS_POS_0 ( reg_var , bitname ) ( reg_var & ( bitname ## _MASK ) ) # define BMI08_SET_BIT_VAL_0 ( reg_var , bitname ) ( reg_var & ~ ( bitname ## _MASK ) ) /**\\name     Macro definition for difference between 2 values */ # define BMI08_GET_DIFF ( x , y ) ( ( x ) - ( y ) ) /**\\name     Macro definition to get LSB of 16 bit variable */ # define BMI08_GET_LSB ( var ) ( uint8_t ) ( var & BMI08_SET_LOW_BYTE ) /**\\name     Macro definition to get MSB of 16 bit variable */ # define BMI08_GET_MSB ( var ) ( uint8_t ) ( ( var & BMI08_SET_HIGH_BYTE ) >> 8 ) /*************************************************************************/ /*!\n * @brief Interface selection enums\n */ enum bmi08_intf { /*! I2C interface */ BMI08_I2C_INTF , /*! SPI interface */ BMI08_SPI_INTF } ; /*!\n * @brief Enum to define variants\n */ enum bmi08_variant { BMI085_VARIANT = 0 , BMI088_VARIANT = 1 } ; /*************************** Data structures *****************************/ /**\\name    Typedef definitions */ /*!\n * @brief Bus communication function pointer which should be mapped to\n * the platform specific read and write functions of the user\n */ /*!\n * @brief Bus communication function pointer which should be mapped to\n * the platform specific read functions of the user\n *\n * @param[in]     reg_addr : 8bit register address of the sensor\n * @param[in]     reg_data : Data from the specified address\n * @param[in]     len      : Length of the reg_data array\n * @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n *                           for interface related callbacks\n * @retval 0 for Success\n * @retval Non-zero for Failure\n */ typedef BMI08_INTF_RET_TYPE ( * bmi08_read_fptr_t ) ( uint8_t reg_addr , uint8_t * reg_data , uint32_t len , void * intf_ptr ) ; /*!\n * @brief Bus communication function pointer which should be mapped to\n * the platform specific write functions of the user\n *\n * @param[in]     reg_addr : 8bit register address of the sensor\n * @param[out]    reg_data : Data to the specified address\n * @param[in]     len      : Length of the reg_data array\n * @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n *                           for interface related callbacks\n * @retval 0 for Success\n * @retval Non-zero for Failure\n *\n */ typedef BMI08_INTF_RET_TYPE ( * bmi08_write_fptr_t ) ( uint8_t reg_addr , const uint8_t * reg_data , uint32_t len , void * intf_ptr ) ; /*!\n * @brief Delay function pointer which should be mapped to\n * delay function of the user\n *\n * @param[in] period              : Delay in microseconds.\n * @param[in, out] intf_ptr       : Void pointer that can enable the linking of descriptors\n *                                  for interface related call backs\n *\n */ typedef void ( * bmi08_delay_us_fptr_t ) ( uint32_t period , void * intf_ptr ) ; /**\\name    Structure Definitions */ /*!\n *  @brief Sensor XYZ data structure\n */ struct bmi08_sensor_data { /*! X-axis sensor data */ int16_t x ; /*! Y-axis sensor data */ int16_t y ; /*! Z-axis sensor data */ int16_t z ; } ; /*!\n *  @brief Sensor XYZ data structure in float representation\n */ struct bmi08_sensor_data_f { /*! X-axis sensor data */ float x ; /*! Y-axis sensor data */ float y ; /*! Z-axis sensor data */ float z ; } ; /*!\n *  @brief Sensor configuration structure\n */ struct bmi08_cfg { /*! power mode */ uint8_t power ; /*! range */ uint8_t range ; /*! bandwidth */ uint8_t bw ; /*! output data rate */ uint8_t odr ; } ; /*!\n *  @brief Error Status structure\n */ struct bmi08_err_reg { /*! Indicates fatal error */ uint8_t fatal_err ; /*! Indicates error code */ uint8_t err_code ; } ; /*!\n *  @brief Data Sync config structure\n */ struct bmi08_data_sync_cfg { /*! Mode (0 = off, 1 = 400Hz, 2 = 1kHz, 3 = 2kHz) */ uint8_t mode ; } ; /*!\n *  @brief Enum to select accelerometer Interrupt pins\n */ enum bmi08_accel_int_channel { /* interrupt Channel 1 for accel sensor */ BMI08_INT_CHANNEL_1 , /* interrupt Channel 2 for accel sensor */ BMI08_INT_CHANNEL_2 } ; /*!\n *  @brief Enum to select gyroscope Interrupt pins\n */ enum bmi08_gyro_int_channel { /* interrupt Channel 3 for gyro sensor */ BMI08_INT_CHANNEL_3 , /* interrupt Channel 4 for gyro sensor */ BMI08_INT_CHANNEL_4 } ; /*!\n *  @brief Enum to select accelerometer interrupts\n */ enum bmi08_accel_int_types { BMI08_ACCEL_INT_DATA_RDY , /* Accel data ready interrupt */ BMI08_ACCEL_INT_SYNC_DATA_RDY , /* Accel synchronized data ready interrupt */ BMI08_ACCEL_SYNC_INPUT , /* Accel FIFO watermark interrupt */ BMI08_ACCEL_INT_FIFO_WM , /* Accel FIFO full interrupt */ BMI08_ACCEL_INT_FIFO_FULL } ; /*!\n *  @brief Enum to select gyroscope interrupts\n */ enum bmi08_gyro_int_types { /* Gyro data ready interrupt */ BMI08_GYRO_INT_DATA_RDY , /* Gyro FIFO watermark interrupt */ BMI08_GYRO_INT_FIFO_WM , /* Gyro FIFO full interrupt */ BMI08_GYRO_INT_FIFO_FULL } ; /*!\n *  @brief Interrupt pin configuration structure\n */ struct bmi08_int_pin_cfg { /*! interrupt pin level configuration\n     * Assignable macros :\n     * - BMI08_INT_ACTIVE_LOW\n     * - BMI08_INT_ACTIVE_HIGH\n     */ uint8_t lvl ; /*! interrupt pin mode configuration\n     * Assignable macros :\n     * - BMI08_INT_MODE_PUSH_PULL\n     * - BMI08_INT_MODE_OPEN_DRAIN\n     */ uint8_t output_mode ; /*! Enable interrupt pin\n     * Assignable Macros :\n     * - BMI08_ENABLE\n     * - BMI08_DISABLE\n     */ uint8_t enable_int_pin ; } ; /*!\n *  @brief Interrupt channel structure for accel\n */ struct bmi08_accel_int_channel_cfg { /*! Accel Interrupt channel */ enum bmi08_accel_int_channel int_channel ; /*! Select Accel Interrupt type */ enum bmi08_accel_int_types int_type ; /*! Structure to configure accel interrupt pins */ struct bmi08_int_pin_cfg int_pin_cfg ; } ; /*!\n *  @brief Interrupt channel structure for gyro\n */ struct bmi08_gyro_int_channel_cfg { /*! Gyro Interrupt channel */ enum bmi08_gyro_int_channel int_channel ; /*! Select Gyro Interrupt type */ enum bmi08_gyro_int_types int_type ; /*! Structure to configure gyro interrupt pins */ struct bmi08_int_pin_cfg int_pin_cfg ; } ; /*!\n *  @brief Interrupt Configuration structure\n */ struct bmi08_int_cfg { /*! Configuration of first accel interrupt channel */ struct bmi08_accel_int_channel_cfg accel_int_config_1 ; /*! Configuration of second accel interrupt channel */ struct bmi08_accel_int_channel_cfg accel_int_config_2 ; /*! Configuration of first gyro interrupt channel */ struct bmi08_gyro_int_channel_cfg gyro_int_config_1 ; /*! Configuration of second gyro interrupt channel */ struct bmi08_gyro_int_channel_cfg gyro_int_config_2 ; } ; /*!\n *  @brief Accel Fifo configurations\n */ struct bmi08_accel_fifo_config { /*! Configure the fifo mode (0 = Stream mode, 1 = FIFO mode) */ uint8_t mode ; /*! To enable the accel */ uint8_t accel_en ; /*! To enable the interrupt_1 */ uint8_t int1_en ; /*! To enable the interrupt_2 */ uint8_t int2_en ; } ; /*!\n * @brief Gyro Fifo configurations\n */ struct bmi08_gyr_fifo_config { /*! Configure the fifo mode (0 = Stream mode, 1 = FIFO mode) */ uint8_t mode ; /*! Selection of axis for data */ uint8_t data_select ; /*! Tag to include/exclude interrupt in FIFO data bytes */ uint8_t tag ; /*! Frame count of fifo data */ uint8_t frame_count ; /*! Water-mark level for FIFO */ uint16_t wm_level ; } ; /*! @name Structure to define FIFO frame configuration */ struct bmi08_fifo_frame { /*! Pointer to FIFO data */ uint8_t * data ; /*! Number of user defined bytes of FIFO to be read */ uint16_t length ; /*! Enables type of data to be streamed - accelerometer */ uint16_t acc_data_enable ; /*! Enables type of data to be streamed - gyroscope */ uint16_t gyr_data_enable ; /*! To index accelerometer bytes */ uint16_t acc_byte_start_idx ; /*! To index gyroscope bytes */ uint16_t gyr_byte_start_idx ; /*! FIFO sensor time */ uint32_t sensor_time ; /*! Skipped frame count */ uint8_t skipped_frame_count ; /*! Type of data interrupt to be mapped */ uint8_t data_int_map ; /*! FIFO accelerometer configurations */ struct bmi08_accel_fifo_config acc_fifo_conf ; /*! FIFO gyroscope configurations */ struct bmi08_gyr_fifo_config gyr_fifo_conf ; } ; /*! @name Structure to store the value of re-mapped axis and its sign */ struct bmi08_axes_remap { /*! Re-mapped x-axis */ uint8_t x_axis ; /*! Re-mapped y-axis */ uint8_t y_axis ; /*! Re-mapped z-axis */ uint8_t z_axis ; /*! Re-mapped x-axis sign */ uint8_t x_axis_sign ; /*! Re-mapped y-axis sign */ uint8_t y_axis_sign ; /*! Re-mapped z-axis sign */ uint8_t z_axis_sign ; } ; /*!\n *  @brief This structure holds all relevant information about BMI08\n */ struct bmi08_dev { /*! Accel chip Id */ uint8_t accel_chip_id ; /*! Gyro chip Id */ uint8_t gyro_chip_id ; /*! Interface function pointer used to enable the device address for I2C and chip selection for SPI */ void * intf_ptr_accel ; /*! Interface function pointer used to enable the device address for I2C and chip selection for SPI */ void * intf_ptr_gyro ; /*! Interface Selection\n     * For SPI, interface = BMI08_SPI_INTF\n     * For I2C, interface = BMI08_I2C_INTF\n     **/ enum bmi08_intf intf ; /*! Define the BMI08 variant BMI085 or BMI088 */ enum bmi08_variant variant ; /*! Decide SPI or I2C read mechanism */ uint8_t dummy_byte ; /*! Structure to configure accel sensor  */ struct bmi08_cfg accel_cfg ; /*! Structure to configure gyro sensor  */ struct bmi08_cfg gyro_cfg ; /*! Structure to maintain a copy of the re-mapped axis */ struct bmi08_axes_remap remap ; /*! Config stream data buffer address will be assigned */ const uint8_t * config_file_ptr ; /*! Max read/write length\n     * To be set by the user */ uint16_t read_write_len ; /*! Read function pointer */ bmi08_read_fptr_t read ; /*! Write function pointer */ bmi08_write_fptr_t write ; /*! Delay function pointer */ bmi08_delay_us_fptr_t delay_us ; /*! Variable to store result of read/write function */ BMI08_INTF_RET_TYPE"]], "adxl375_dev": [["chip_id", "uint8_t"], ["intf_ptr", "void *"], ["intf_rslt", "int8_t"], ["read", "adxl375_read_fptr_t"], ["write", "adxl375_write_fptr_t"], ["delay_us", "adxl375_delay_us_fptr_t"]], "adxl375_data": [["x", "float"], ["y", "float"], ["z", "float"]], "bmp3_reg_calib_data": [["par_t1", "uint16_t"], ["par_t2", "uint16_t"], ["par_t3", "int8_t"], ["par_p1", "int16_t"], ["par_p2", "int16_t"], ["par_p3", "int8_t"], ["par_p4", "int8_t"], ["par_p5", "uint16_t"], ["par_p6", "uint16_t"], ["par_p7", "int8_t"], ["par_p8", "int8_t"], ["par_p9", "int16_t"], ["par_p10", "int8_t"], ["par_p11", "int8_t"], ["t_lin", "int64_t"]], "bmp3_adv_settings": [["i2c_wdt_en", "uint8_t"], ["i2c_wdt_sel", "uint8_t"]], "bmp3_odr_filter_settings": [["press_os", "uint8_t"], ["temp_os", "uint8_t"], ["iir_filter", "uint8_t"], ["odr", "uint8_t"]], "bmp3_sens_status": [["cmd_rdy", "uint8_t"], ["drdy_press", "uint8_t"], ["drdy_temp", "uint8_t"]], "bmp3_int_status": [["fifo_wm", "uint8_t"], ["fifo_full", "uint8_t"], ["drdy", "uint8_t"]], "bmp3_err_status": [["fatal", "uint8_t"], ["cmd", "uint8_t"], ["conf", "uint8_t"]], "bmp3_status": [["intr", "struct bmp3_int_status"], ["sensor", "struct bmp3_sens_status"], ["err", "struct bmp3_err_status"], ["pwr_on_rst", "uint8_t"]], "bmp3_int_ctrl_settings": [["output_mode", "uint8_t"], ["level", "uint8_t"], ["latch", "uint8_t"], ["drdy_en", "uint8_t"]], "bmp3_settings": [["op_mode", "uint8_t"], ["press_en", "uint8_t"], ["temp_en", "uint8_t"], ["odr_filter", "struct bmp3_odr_filter_settings"], ["int_settings", "struct bmp3_int_ctrl_settings"], ["adv_settings", "struct bmp3_adv_settings"]], "bmp3_fifo_data": [["buffer", "uint8_t *"], ["byte_count", "uint16_t"], ["req_frames", "uint8_t"], ["start_idx", "uint16_t"], ["parsed_frames", "uint8_t"], ["config_err", "uint8_t"], ["sensor_time", "uint32_t"], ["config_change", "uint8_t"], ["frame_not_available", "uint8_t"]], "bmp3_fifo_settings": [["mode", "uint8_t"], ["stop_on_full_en", "uint8_t"], ["time_en", "uint8_t"], ["press_en", "uint8_t"], ["temp_en", "uint8_t"], ["down_sampling", "uint8_t"], ["filter_en", "uint8_t"], ["fwtm_en", "uint8_t"], ["ffull_en", "uint8_t"]], "bmp3_quantized_calib_data": [["par_t1", "double"], ["par_t2", "double"], ["par_t3", "double"], ["par_p1", "double"], ["par_p2", "double"], ["par_p3", "double"], ["par_p4", "double"], ["par_p5", "double"], ["par_p6", "double"], ["par_p7", "double"], ["par_p8", "double"], ["par_p9", "double"], ["par_p10", "double"], ["par_p11", "double"], ["t_lin", "double"]], "bmp3_calib_data": [["quantized_calib_data", "struct bmp3_quantized_calib_data"], ["reg_calib_data", "struct bmp3_reg_calib_data"]], "bmp3_data": [["temperature", "double"], ["pressure", "double"]], "bmp3_uncomp_data": [["pressure", "uint64_t"], ["temperature", "int64_t"]], "bmp3_dev": [["chip_id", "uint8_t"], ["intf_ptr", "void *"], ["intf", "enum bmp3_intf"], ["intf_rslt", "int8_t # endif /**\n * The last error code from read/write interface is stored in the device structure as intf_rslt.\n */ # ifndef BMP3_INTF_RET_SUCCESS # define BMP3_INTF_RET_SUCCESS INT8_C ( 0 ) # endif /**\\name I2C addresses */ # define BMP3_ADDR_I2C_PRIM UINT8_C ( 0x76 ) # define BMP3_ADDR_I2C_SEC UINT8_C ( 0x77 ) /**\\name BMP3 chip identifier */ # define BMP3_CHIP_ID UINT8_C ( 0x50 ) # define BMP390_CHIP_ID UINT8_C ( 0x60 ) /**\\name BMP3 pressure settling time (micro secs)*/ # define BMP3_SETTLE_TIME_PRESS UINT16_C ( 392 ) /**\\name BMP3 temperature settling time (micro secs) */ # define BMP3_SETTLE_TIME_TEMP UINT16_C ( 313 ) /**\\name BMP3 adc conversion time (micro secs) */ # define BMP3_ADC_CONV_TIME UINT16_C ( 2000 ) /**\\name Register Address */ # define BMP3_REG_CHIP_ID UINT8_C ( 0x00 ) # define BMP3_REG_ERR UINT8_C ( 0x02 ) # define BMP3_REG_SENS_STATUS UINT8_C ( 0x03 ) # define BMP3_REG_DATA UINT8_C ( 0x04 ) # define BMP3_REG_EVENT UINT8_C ( 0x10 ) # define BMP3_REG_INT_STATUS UINT8_C ( 0x11 ) # define BMP3_REG_FIFO_LENGTH UINT8_C ( 0x12 ) # define BMP3_REG_FIFO_DATA UINT8_C ( 0x14 ) # define BMP3_REG_FIFO_WM UINT8_C ( 0x15 ) # define BMP3_REG_FIFO_CONFIG_1 UINT8_C ( 0x17 ) # define BMP3_REG_FIFO_CONFIG_2 UINT8_C ( 0x18 ) # define BMP3_REG_INT_CTRL UINT8_C ( 0x19 ) # define BMP3_REG_IF_CONF UINT8_C ( 0x1A ) # define BMP3_REG_PWR_CTRL UINT8_C ( 0x1B ) # define BMP3_REG_OSR UINT8_C ( 0X1C ) # define BMP3_REG_ODR UINT8_C ( 0x1D ) # define BMP3_REG_CONFIG UINT8_C ( 0x1F ) # define BMP3_REG_CALIB_DATA UINT8_C ( 0x31 ) # define BMP3_REG_CMD UINT8_C ( 0x7E ) /**\\name Error status macros */ # define BMP3_ERR_FATAL UINT8_C ( 0x01 ) # define BMP3_ERR_CMD UINT8_C ( 0x02 ) # define BMP3_ERR_CONF UINT8_C ( 0x04 ) /**\\name Status macros */ # define BMP3_CMD_RDY UINT8_C ( 0x10 ) # define BMP3_DRDY_PRESS UINT8_C ( 0x20 ) # define BMP3_DRDY_TEMP UINT8_C ( 0x40 ) /**\\name Power mode macros */ # define BMP3_MODE_SLEEP UINT8_C ( 0x00 ) # define BMP3_MODE_FORCED UINT8_C ( 0x01 ) # define BMP3_MODE_NORMAL UINT8_C ( 0x03 ) /**\\name FIFO related macros */ /**\\name FIFO enable  */ # define BMP3_ENABLE UINT8_C ( 0x01 ) # define BMP3_DISABLE UINT8_C ( 0x00 ) /**\\name Interrupt pin configuration macros */ /**\\name Open drain */ # define BMP3_INT_PIN_OPEN_DRAIN UINT8_C ( 0x01 ) # define BMP3_INT_PIN_PUSH_PULL UINT8_C ( 0x00 ) /**\\name Level */ # define BMP3_INT_PIN_ACTIVE_HIGH UINT8_C ( 0x01 ) # define BMP3_INT_PIN_ACTIVE_LOW UINT8_C ( 0x00 ) /**\\name Latch */ # define BMP3_INT_PIN_LATCH UINT8_C ( 0x01 ) # define BMP3_INT_PIN_NON_LATCH UINT8_C ( 0x00 ) /**\\name Advance settings  */ /**\\name I2c watch dog timer period selection */ # define BMP3_I2C_WDT_SHORT_1_25_MS UINT8_C ( 0x00 ) # define BMP3_I2C_WDT_LONG_40_MS UINT8_C ( 0x01 ) /**\\name FIFO Sub-sampling macros */ # define BMP3_FIFO_NO_SUBSAMPLING UINT8_C ( 0x00 ) # define BMP3_FIFO_SUBSAMPLING_2X UINT8_C ( 0x01 ) # define BMP3_FIFO_SUBSAMPLING_4X UINT8_C ( 0x02 ) # define BMP3_FIFO_SUBSAMPLING_8X UINT8_C ( 0x03 ) # define BMP3_FIFO_SUBSAMPLING_16X UINT8_C ( 0x04 ) # define BMP3_FIFO_SUBSAMPLING_32X UINT8_C ( 0x05 ) # define BMP3_FIFO_SUBSAMPLING_64X UINT8_C ( 0x06 ) # define BMP3_FIFO_SUBSAMPLING_128X UINT8_C ( 0x07 ) /**\\name Over sampling macros */ # define BMP3_NO_OVERSAMPLING UINT8_C ( 0x00 ) # define BMP3_OVERSAMPLING_2X UINT8_C ( 0x01 ) # define BMP3_OVERSAMPLING_4X UINT8_C ( 0x02 ) # define BMP3_OVERSAMPLING_8X UINT8_C ( 0x03 ) # define BMP3_OVERSAMPLING_16X UINT8_C ( 0x04 ) # define BMP3_OVERSAMPLING_32X UINT8_C ( 0x05 ) /**\\name Filter setting macros */ # define BMP3_IIR_FILTER_DISABLE UINT8_C ( 0x00 ) # define BMP3_IIR_FILTER_COEFF_1 UINT8_C ( 0x01 ) # define BMP3_IIR_FILTER_COEFF_3 UINT8_C ( 0x02 ) # define BMP3_IIR_FILTER_COEFF_7 UINT8_C ( 0x03 ) # define BMP3_IIR_FILTER_COEFF_15 UINT8_C ( 0x04 ) # define BMP3_IIR_FILTER_COEFF_31 UINT8_C ( 0x05 ) # define BMP3_IIR_FILTER_COEFF_63 UINT8_C ( 0x06 ) # define BMP3_IIR_FILTER_COEFF_127 UINT8_C ( 0x07 ) /**\\name Odr setting macros */ # define BMP3_ODR_200_HZ UINT8_C ( 0x00 ) # define BMP3_ODR_100_HZ UINT8_C ( 0x01 ) # define BMP3_ODR_50_HZ UINT8_C ( 0x02 ) # define BMP3_ODR_25_HZ UINT8_C ( 0x03 ) # define BMP3_ODR_12_5_HZ UINT8_C ( 0x04 ) # define BMP3_ODR_6_25_HZ UINT8_C ( 0x05 ) # define BMP3_ODR_3_1_HZ UINT8_C ( 0x06 ) # define BMP3_ODR_1_5_HZ UINT8_C ( 0x07 ) # define BMP3_ODR_0_78_HZ UINT8_C ( 0x08 ) # define BMP3_ODR_0_39_HZ UINT8_C ( 0x09 ) # define BMP3_ODR_0_2_HZ UINT8_C ( 0x0A ) # define BMP3_ODR_0_1_HZ UINT8_C ( 0x0B ) # define BMP3_ODR_0_05_HZ UINT8_C ( 0x0C ) # define BMP3_ODR_0_02_HZ UINT8_C ( 0x0D ) # define BMP3_ODR_0_01_HZ UINT8_C ( 0x0E ) # define BMP3_ODR_0_006_HZ UINT8_C ( 0x0F ) # define BMP3_ODR_0_003_HZ UINT8_C ( 0x10 ) # define BMP3_ODR_0_001_HZ UINT8_C ( 0x11 ) /**\\name Soft reset command */ # define BMP3_SOFT_RESET UINT8_C ( 0xB6 ) /**\\name FIFO flush command */ # define BMP3_FIFO_FLUSH UINT8_C ( 0xB0 ) /**\\name API success code */ # define BMP3_OK INT8_C ( 0 ) /**\\name API error codes */ # define BMP3_E_NULL_PTR INT8_C ( - 1 ) # define BMP3_E_COMM_FAIL INT8_C ( - 2 ) # define BMP3_E_INVALID_ODR_OSR_SETTINGS INT8_C ( - 3 ) # define BMP3_E_CMD_EXEC_FAILED INT8_C ( - 4 ) # define BMP3_E_CONFIGURATION_ERR INT8_C ( - 5 ) # define BMP3_E_INVALID_LEN INT8_C ( - 6 ) # define BMP3_E_DEV_NOT_FOUND INT8_C ( - 7 ) # define BMP3_E_FIFO_WATERMARK_NOT_REACHED INT8_C ( - 8 ) /**\\name API warning codes */ # define BMP3_W_SENSOR_NOT_ENABLED INT8_C ( 1 ) # define BMP3_W_INVALID_FIFO_REQ_FRAME_CNT INT8_C ( 2 ) # define BMP3_W_MIN_TEMP INT8_C ( 3 ) # define BMP3_W_MAX_TEMP INT8_C ( 4 ) # define BMP3_W_MIN_PRES INT8_C ( 5 ) # define BMP3_W_MAX_PRES INT8_C ( 6 ) /**\\name Macros to select the which sensor settings are to be set by the user.\n * These values are internal for API implementation. Don't relate this to\n * data sheet. */ # define BMP3_SEL_PRESS_EN UINT16_C ( 1 << 1 ) # define BMP3_SEL_TEMP_EN UINT16_C ( 1 << 2 ) # define BMP3_SEL_DRDY_EN UINT16_C ( 1 << 3 ) # define BMP3_SEL_PRESS_OS UINT16_C ( 1 << 4 ) # define BMP3_SEL_TEMP_OS UINT16_C ( 1 << 5 ) # define BMP3_SEL_IIR_FILTER UINT16_C ( 1 << 6 ) # define BMP3_SEL_ODR UINT16_C ( 1 << 7 ) # define BMP3_SEL_OUTPUT_MODE UINT16_C ( 1 << 8 ) # define BMP3_SEL_LEVEL UINT16_C ( 1 << 9 ) # define BMP3_SEL_LATCH UINT16_C ( 1 << 10 ) # define BMP3_SEL_I2C_WDT_EN UINT16_C ( 1 << 11 ) # define BMP3_SEL_I2C_WDT UINT16_C ( 1 << 12 ) # define BMP3_SEL_ALL UINT16_C ( 0x7FF ) /**\\name Macros to select the which FIFO settings are to be set by the user\n * These values are internal for API implementation. Don't relate this to\n * data sheet.*/ # define BMP3_SEL_FIFO_MODE UINT16_C ( 1 << 1 ) # define BMP3_SEL_FIFO_STOP_ON_FULL_EN UINT16_C ( 1 << 2 ) # define BMP3_SEL_FIFO_TIME_EN UINT16_C ( 1 << 3 ) # define BMP3_SEL_FIFO_PRESS_EN UINT16_C ( 1 << 4 ) # define BMP3_SEL_FIFO_TEMP_EN UINT16_C ( 1 << 5 ) # define BMP3_SEL_FIFO_DOWN_SAMPLING UINT16_C ( 1 << 6 ) # define BMP3_SEL_FIFO_FILTER_EN UINT16_C ( 1 << 7 ) # define BMP3_SEL_FIFO_FWTM_EN UINT16_C ( 1 << 8 ) # define BMP3_SEL_FIFO_FULL_EN UINT16_C ( 1 << 9 ) /**\\name Sensor component selection macros\n * These values are internal for API implementation. Don't relate this to\n * data sheet.*/ # define BMP3_PRESS UINT8_C ( 1 ) # define BMP3_TEMP UINT8_C ( 2 ) # define BMP3_PRESS_TEMP UINT8_C ( 3 ) /**\\name Temperature range values in integer and float */ # define BMP3_MIN_TEMP_INT INT64_C ( - 4000 ) # define BMP3_MAX_TEMP_INT INT64_C ( 8500 ) # define BMP3_MIN_TEMP_DOUBLE - 40.0f # define BMP3_MAX_TEMP_DOUBLE 85.0f /**\\name Pressure range values in integer and float */ # define BMP3_MIN_PRES_INT UINT64_C ( 3000000 ) # define BMP3_MAX_PRES_INT UINT64_C ( 12500000 ) # define BMP3_MIN_PRES_DOUBLE 30000.0f # define BMP3_MAX_PRES_DOUBLE 125000.0f /**\\name Macros for bit masking */ # define BMP3_ERR_FATAL_MSK UINT8_C ( 0x01 ) # define BMP3_ERR_CMD_MSK UINT8_C ( 0x02 ) # define BMP3_ERR_CMD_POS UINT8_C ( 0x01 ) # define BMP3_ERR_CONF_MSK UINT8_C ( 0x04 ) # define BMP3_ERR_CONF_POS UINT8_C ( 0x02 ) # define BMP3_STATUS_CMD_RDY_MSK UINT8_C ( 0x10 ) # define BMP3_STATUS_CMD_RDY_POS UINT8_C ( 0x04 ) # define BMP3_STATUS_DRDY_PRESS_MSK UINT8_C ( 0x20 ) # define BMP3_STATUS_DRDY_PRESS_POS UINT8_C ( 0x05 ) # define BMP3_STATUS_DRDY_TEMP_MSK UINT8_C ( 0x40 ) # define BMP3_STATUS_DRDY_TEMP_POS UINT8_C ( 0x06 ) # define BMP3_OP_MODE_MSK UINT8_C ( 0x30 ) # define BMP3_OP_MODE_POS UINT8_C ( 0x04 ) # define BMP3_PRESS_EN_MSK UINT8_C ( 0x01 ) # define BMP3_TEMP_EN_MSK UINT8_C ( 0x02 ) # define BMP3_TEMP_EN_POS UINT8_C ( 0x01 ) # define BMP3_IIR_FILTER_MSK UINT8_C ( 0x0E ) # define BMP3_IIR_FILTER_POS UINT8_C ( 0x01 ) # define BMP3_ODR_MSK UINT8_C ( 0x1F ) # define BMP3_PRESS_OS_MSK UINT8_C ( 0x07 ) # define BMP3_TEMP_OS_MSK UINT8_C ( 0x38 ) # define BMP3_TEMP_OS_POS UINT8_C ( 0x03 ) # define BMP3_FIFO_MODE_MSK UINT8_C ( 0x01 ) # define BMP3_FIFO_STOP_ON_FULL_MSK UINT8_C ( 0x02 ) # define BMP3_FIFO_STOP_ON_FULL_POS UINT8_C ( 0x01 ) # define BMP3_FIFO_TIME_EN_MSK UINT8_C ( 0x04 ) # define BMP3_FIFO_TIME_EN_POS UINT8_C ( 0x02 ) # define BMP3_FIFO_PRESS_EN_MSK UINT8_C ( 0x08 ) # define BMP3_FIFO_PRESS_EN_POS UINT8_C ( 0x03 ) # define BMP3_FIFO_TEMP_EN_MSK UINT8_C ( 0x10 ) # define BMP3_FIFO_TEMP_EN_POS UINT8_C ( 0x04 ) # define BMP3_FIFO_FILTER_EN_MSK UINT8_C ( 0x18 ) # define BMP3_FIFO_FILTER_EN_POS UINT8_C ( 0x03 ) # define BMP3_FIFO_DOWN_SAMPLING_MSK UINT8_C ( 0x07 ) # define BMP3_FIFO_FWTM_EN_MSK UINT8_C ( 0x08 ) # define BMP3_FIFO_FWTM_EN_POS UINT8_C ( 0x03 ) # define BMP3_FIFO_FULL_EN_MSK UINT8_C ( 0x10 ) # define BMP3_FIFO_FULL_EN_POS UINT8_C ( 0x04 ) # define BMP3_INT_OUTPUT_MODE_MSK UINT8_C ( 0x01 ) # define BMP3_INT_LEVEL_MSK UINT8_C ( 0x02 ) # define BMP3_INT_LEVEL_POS UINT8_C ( 0x01 ) # define BMP3_INT_LATCH_MSK UINT8_C ( 0x04 ) # define BMP3_INT_LATCH_POS UINT8_C ( 0x02 ) # define BMP3_INT_DRDY_EN_MSK UINT8_C ( 0x40 ) # define BMP3_INT_DRDY_EN_POS UINT8_C ( 0x06 ) # define BMP3_I2C_WDT_EN_MSK UINT8_C ( 0x02 ) # define BMP3_I2C_WDT_EN_POS UINT8_C ( 0x01 ) # define BMP3_I2C_WDT_SEL_MSK UINT8_C ( 0x04 ) # define BMP3_I2C_WDT_SEL_POS UINT8_C ( 0x02 ) # define BMP3_INT_STATUS_FWTM_MSK UINT8_C ( 0x01 ) # define BMP3_INT_STATUS_FFULL_MSK UINT8_C ( 0x02 ) # define BMP3_INT_STATUS_FFULL_POS UINT8_C ( 0x01 ) # define BMP3_INT_STATUS_DRDY_MSK UINT8_C ( 0x08 ) # define BMP3_INT_STATUS_DRDY_POS UINT8_C ( 0x03 ) /**\\name    UTILITY MACROS  */ # define BMP3_SET_LOW_BYTE UINT16_C ( 0x00FF ) # define BMP3_SET_HIGH_BYTE UINT16_C ( 0xFF00 ) /**\\name Macro to combine two 8 bit data's to form a 16 bit data */ # define BMP3_CONCAT_BYTES ( msb , lsb ) ( ( ( uint16_t ) msb << 8 ) | ( uint16_t ) lsb ) # define BMP3_SET_BITS ( reg_data , bitname , data ) ( ( reg_data & ~ ( bitname ## _MSK ) ) | ( ( data << bitname ## _POS ) & bitname ## _MSK ) ) /* Macro variant to handle the bitname position if it is zero */ # define BMP3_SET_BITS_POS_0 ( reg_data , bitname , data ) ( ( reg_data & ~ ( bitname ## _MSK ) ) | ( data & bitname ## _MSK ) ) # define BMP3_GET_BITS ( reg_data , bitname ) ( ( reg_data & ( bitname ## _MSK ) ) >> ( bitname ## _POS ) ) /* Macro variant to handle the bitname position if it is zero */ # define BMP3_GET_BITS_POS_0 ( reg_data , bitname ) ( reg_data & ( bitname ## _MSK ) ) # define BMP3_GET_LSB ( var ) ( uint8_t ) ( var & BMP3_SET_LOW_BYTE ) # define BMP3_GET_MSB ( var ) ( uint8_t ) ( ( var & BMP3_SET_HIGH_BYTE ) >> 8 ) /**\\name Macros related to size */ # define BMP3_LEN_CALIB_DATA UINT8_C ( 21 ) # define BMP3_LEN_P_AND_T_HEADER_DATA UINT8_C ( 7 ) # define BMP3_LEN_P_OR_T_HEADER_DATA UINT8_C ( 4 ) # define BMP3_LEN_P_T_DATA UINT8_C ( 6 ) # define BMP3_LEN_GEN_SETT UINT8_C ( 7 ) # define BMP3_LEN_P_DATA UINT8_C ( 3 ) # define BMP3_LEN_T_DATA UINT8_C ( 3 ) # define BMP3_LEN_SENSOR_TIME UINT8_C ( 3 ) # define BMP3_FIFO_MAX_FRAMES UINT8_C ( 73 ) /*! Power control settings */ # define BMP3_POWER_CNTL UINT16_C ( 0x0006 ) /*! Odr and filter settings */ # define BMP3_ODR_FILTER UINT16_C ( 0x00F0 ) /*! Interrupt control settings */ # define BMP3_INT_CTRL UINT16_C ( 0x0708 ) /*! Advance settings */ # define BMP3_ADV_SETT UINT16_C ( 0x1800 ) /*! FIFO settings */ /*! Mask for fifo_mode, fifo_stop_on_full, fifo_time_en, fifo_press_en and\n * fifo_temp_en settings */ # define BMP3_FIFO_CONFIG_1 UINT16_C ( 0x003E ) /*! Mask for fifo_sub_sampling and data_select settings */ # define BMP3_FIFO_CONFIG_2 UINT16_C ( 0x00C0 ) /*! Mask for fwtm_en and ffull_en settings */ # define BMP3_FIFO_INT_CTRL UINT16_C ( 0x0300 ) /*! FIFO Header */ /*! FIFO temperature pressure header frame */ # define BMP3_FIFO_TEMP_PRESS_FRAME UINT8_C ( 0x94 ) /*! FIFO temperature header frame */ # define BMP3_FIFO_TEMP_FRAME UINT8_C ( 0x90 ) /*! FIFO pressure header frame */ # define BMP3_FIFO_PRESS_FRAME UINT8_C ( 0x84 ) /*! FIFO time header frame */ # define BMP3_FIFO_TIME_FRAME UINT8_C ( 0xA0 ) /*! FIFO error header frame */ # define BMP3_FIFO_ERROR_FRAME UINT8_C ( 0x44 ) /*! FIFO configuration change header frame */ # define BMP3_FIFO_CONFIG_CHANGE UINT8_C ( 0x48 ) /*! FIFO empty frame */ # define BMP3_FIFO_EMPTY_FRAME UINT8_C ( 0x80 ) /*! FIFO sensortime overhead byte count */ # define BMP3_SENSORTIME_OVERHEAD_BYTES UINT8_C ( 20 ) /********************************************************/ /*!\n * @brief Interface selection Enums\n */ enum bmp3_intf { /*! SPI interface */ BMP3_SPI_INTF , /*! I2C interface */ BMP3_I2C_INTF } ; /********************************************************/ /*!\n * @brief Type definitions\n */ /*!\n * @brief Bus communication function pointer which should be mapped to\n * the platform specific read functions of the user\n *\n * @param[in]     reg_addr : 8bit register address of the sensor\n * @param[out]    reg_data : Data from the specified address\n * @param[in]     length   : Length of the reg_data array\n * @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n *                           for interface related callbacks\n * @retval 0 for Success\n * @retval Non-zero for Failure\n */ typedef BMP3_INTF_RET_TYPE ( * bmp3_read_fptr_t ) ( uint8_t reg_addr , uint8_t * read_data , uint32_t len , void * intf_ptr ) ; /*!\n * @brief Bus communication function pointer which should be mapped to\n * the platform specific write functions of the user\n *\n * @param[in]     reg_addr : 8bit register address of the sensor\n * @param[out]    reg_data : Data to the specified address\n * @param[in]     length   : Length of the reg_data array\n * @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n *                           for interface related callbacks\n * @retval 0 for Success\n * @retval Non-zero for Failure\n *\n */ typedef BMP3_INTF_RET_TYPE ( * bmp3_write_fptr_t ) ( uint8_t reg_addr , const uint8_t * read_data , uint32_t len , void * intf_ptr ) ; /*!\n * @brief Delay function pointer which should be mapped to\n * delay function of the user\n *\n * @param[in] period              : Delay in microseconds.\n * @param[in, out] intf_ptr       : Void pointer that can enable the linking of descriptors\n *                                  for interface related call backs\n *\n */ typedef void ( * bmp3_delay_us_fptr_t ) ( uint32_t period , void * intf_ptr ) ; /********************************************************/ /*!\n * @brief Register Trim Variables\n */ struct bmp3_reg_calib_data { /*! Trim Variables */ uint16_t par_t1 ; uint16_t par_t2 ; int8_t par_t3 ; int16_t par_p1 ; int16_t par_p2 ; int8_t par_p3 ; int8_t par_p4 ; uint16_t par_p5 ; uint16_t par_p6 ; int8_t par_p7 ; int8_t par_p8 ; int16_t par_p9 ; int8_t par_p10 ; int8_t par_p11 ; int64_t t_lin ; } ; /*!\n * @brief bmp3 advance settings\n */ struct bmp3_adv_settings { /*! I2C watchdog enable */ uint8_t i2c_wdt_en ; /*! I2C watchdog select */ uint8_t i2c_wdt_sel ; } ; /*!\n * @brief bmp3 odr and filter settings\n */ struct bmp3_odr_filter_settings { /*! Pressure oversampling */ uint8_t press_os ; /*! Temperature oversampling */ uint8_t temp_os ; /*! IIR filter */ uint8_t iir_filter ; /*! Output data rate */ uint8_t odr ; } ; /*!\n * @brief bmp3 sensor status flags\n */ struct bmp3_sens_status { /*! Command ready status */ uint8_t cmd_rdy ; /*! Data ready for pressure */ uint8_t drdy_press ; /*! Data ready for temperature */ uint8_t drdy_temp ; } ; /*!\n * @brief bmp3 interrupt status flags\n */ struct bmp3_int_status { /*! Fifo watermark interrupt */ uint8_t fifo_wm ; /*! Fifo full interrupt */ uint8_t fifo_full ; /*! Data ready interrupt */ uint8_t drdy ; } ; /*!\n * @brief bmp3 error status flags\n */ struct bmp3_err_status { /*! Fatal error */ uint8_t fatal ; /*! Command error */ uint8_t cmd ; /*! Configuration error */ uint8_t conf ; } ; /*!\n * @brief bmp3 status flags\n */ struct bmp3_status { /*! Interrupt status */ struct bmp3_int_status intr ; /*! Sensor status */ struct bmp3_sens_status sensor ; /*! Error status */ struct bmp3_err_status err ; /*! Power on reset status */ uint8_t pwr_on_rst ; } ; /*!\n * @brief bmp3 interrupt pin settings\n */ struct bmp3_int_ctrl_settings { /*! Output mode */ uint8_t output_mode ; /*! Active high/low */ uint8_t level ; /*! Latched or Non-latched */ uint8_t latch ; /*! Data ready interrupt */ uint8_t drdy_en ; } ; /*!\n * @brief bmp3 device settings\n */ struct bmp3_settings { /*! Power mode which user wants to set */ uint8_t op_mode ; /*! Enable/Disable pressure sensor */ uint8_t press_en ; /*! Enable/Disable temperature sensor */ uint8_t temp_en ; /*! ODR and filter configuration */ struct bmp3_odr_filter_settings odr_filter ; /*! Interrupt configuration */ struct bmp3_int_ctrl_settings int_settings ; /*! Advance settings */ struct bmp3_adv_settings adv_settings ; } ; /*!\n * @brief bmp3 fifo frame\n */ struct bmp3_fifo_data { /*! Data buffer of user defined length is to be mapped here\n     * 512 + 4 */ uint8_t * buffer ; /*! Number of bytes of data read from the fifo */ uint16_t byte_count ; /*! Number of frames to be read as specified by the user */ uint8_t req_frames ; /*! Will be equal to length when no more frames are there to parse */ uint16_t start_idx ; /*! Will contain the no of parsed data frames from fifo */ uint8_t parsed_frames ; /*! Configuration error */ uint8_t config_err ; /*! Sensor time */ uint32_t sensor_time ; /*! FIFO input configuration change */ uint8_t config_change ; /*! All available frames are parsed */ uint8_t frame_not_available ; } ; /*!\n * @brief bmp3 fifo configuration\n */ struct bmp3_fifo_settings { /*! enable/disable */ uint8_t mode ; /*! stop on full enable/disable */ uint8_t stop_on_full_en ; /*! time enable/disable */ uint8_t time_en ; /*! pressure enable/disable */ uint8_t press_en ; /*! temperature enable/disable */ uint8_t temp_en ; /*! down sampling rate */ uint8_t down_sampling ; /*! filter enable/disable */ uint8_t filter_en ; /*! FIFO watermark enable/disable */ uint8_t fwtm_en ; /*! FIFO full enable/disable */ uint8_t ffull_en ; } ; # ifdef BMP3_FLOAT_COMPENSATION /*!\n * @brief Quantized Trim Variables\n */ struct bmp3_quantized_calib_data { /*! Quantized Trim Variables */ double par_t1 ; double par_t2 ; double par_t3 ; double par_p1 ; double par_p2 ; double par_p3 ; double par_p4 ; double par_p5 ; double par_p6 ; double par_p7 ; double par_p8 ; double par_p9 ; double par_p10 ; double par_p11 ; double t_lin ; } ; /*!\n * @brief Calibration data\n */ struct bmp3_calib_data { /*! Quantized data */ struct bmp3_quantized_calib_data quantized_calib_data ; /*! Register data */ struct bmp3_reg_calib_data reg_calib_data ; } ; /*!\n * @brief bmp3 sensor structure which comprises of temperature and pressure\n * data.\n */ struct bmp3_data { /*! Compensated temperature */ double temperature ; /*! Compensated pressure */ double pressure ; } ; # else /*!\n * @brief bmp3 sensor structure which comprises of temperature and pressure\n * data.\n */ struct bmp3_data { /*! Compensated temperature */ int64_t temperature ; /*! Compensated pressure */ uint64_t pressure ; } ; /*!\n * @brief Calibration data\n */ struct bmp3_calib_data { /*! Register data */ struct bmp3_reg_calib_data reg_calib_data ; } ; # endif /* BMP3_FLOAT_COMPENSATION */ /*!\n * @brief bmp3 sensor structure which comprises of un-compensated temperature\n * and pressure data.\n */ struct bmp3_uncomp_data { /*! un-compensated pressure */ uint64_t pressure ; /*! un-compensated temperature */ int64_t temperature ; } ; /*!\n * @brief bmp3 device structure\n */ struct bmp3_dev { /*! Chip Id */ uint8_t chip_id ; /*!\n     * The interface pointer is used to enable the user\n     * to link their interface descriptors for reference during the\n     * implementation of the read and write interfaces to the\n     * hardware.\n     */ void * intf_ptr ; /*! Interface Selection\n     * For SPI, interface = BMP3_SPI_INTF\n     * For I2C, interface = BMP3_I2C_INTF\n     **/ enum bmp3_intf intf ; /*! To store interface pointer error */ BMP3_INTF_RET_TYPE"], ["dummy_byte", "uint8_t"], ["read", "bmp3_read_fptr_t"], ["write", "bmp3_write_fptr_t"], ["delay_us", "bmp3_delay_us_fptr_t"], ["calib_data", "struct bmp3_calib_data"]], "RawDegrees": [["deg", "uint16_t"], ["billionths", "uint32_t"], ["negative", "bool"]], "TinyGPSLocation": [["valid", "bool"], ["updated", "bool valid ,"], ["rawLatData", "RawDegrees"], ["rawLngData", "RawDegrees rawLatData ,"], ["rawNewLatData", "RawDegrees rawLatData , rawLngData ,"], ["rawNewLngData", "RawDegrees rawLatData , rawLngData , rawNewLatData ,"], ["lastCommitTime", "uint32_t"]], "TinyGPSDate": [["valid", "bool"], ["updated", "bool valid ,"], ["date", "uint32_t"], ["newDate", "uint32_t date ,"], ["lastCommitTime", "uint32_t"]], "TinyGPSTime": [["valid", "bool"], ["updated", "bool valid ,"], ["time", "uint32_t"], ["newTime", "uint32_t time ,"], ["lastCommitTime", "uint32_t"]], "TinyGPSDecimal": [["valid", "bool"], ["updated", "bool valid ,"], ["lastCommitTime", "uint32_t"], ["val", "int32_t"], ["newval", "int32_t val ,"]], "TinyGPSInteger": [["valid", "bool"], ["updated", "bool valid ,"], ["lastCommitTime", "uint32_t"], ["val", "uint32_t"], ["newval", "uint32_t val ,"]], "TinyGPSSpeed": [], "TinyGPSCourse": [], "TinyGPSAltitude": [], "TinyGPSHDOP": []}, {"AV_NET_REG_DPR": [[["AV_NET_DPR_TIMESTAMP", 0], ["AV_NET_DPR_WAKE_UP", 1], ["AV_NET_DPR_IS_WOKEN_UP", 2], ["AV_NET_DPR_PRESSURIZE", 3], ["AV_NET_DPR_ABORT", 4], ["AV_NET_DPR_L_XTA", 5], ["AV_NET_DPR_P_XTA", 6], ["AV_NET_DPR_T_XTA", 7], ["AV_NET_DPR_P_NCO", 8], ["AV_NET_DPR_T_NCO", 9], ["AV_NET_DPR_VALVES_STATE", 10], ["AV_NET_DPR_PASSIVATE", 11], ["AV_NET_DPR_NB_REG", 12]], 4, "AV_NET_REG_DPR"], "AV_NET_REG_PRB": [[["AV_NET_PRB_TIMESTAMP", 0], ["AV_NET_PRB_WAKE_UP", 1], ["AV_NET_PRB_IS_WOKEN_UP", 2], ["AV_NET_PRB_CLEAR_TO_IGNITE", 3], ["AV_NET_PRB_FSM_PRB", 4], ["AV_NET_PRB_ABORT", 5], ["AV_NET_PRB_P_OIN", 6], ["AV_NET_PRB_T_OIN", 7], ["AV_NET_PRB_P_EIN", 8], ["AV_NET_PRB_T_EIN", 9], ["AV_NET_PRB_P_CCC", 10], ["AV_NET_PRB_T_CCC", 11], ["AV_NET_PRB_T_EIN_PT1000", 12], ["AV_NET_PRB_VALVES_STATE", 13], ["AV_NET_PRB_IGNITER", 14], ["AV_NET_PRB_SPECIFIC_IMP", 15], ["AV_NET_PRB_PASSIVATE", 16], ["AV_NET_PRB_RESET", 17], ["AV_NET_PRB_NB_REG", 18]], 4, "AV_NET_REG_PRB"], "PRB_FSM": [[["IDLE", 0], ["CLEAR_TO_IGNITE", 1], ["IGNITION_SQ", 2], ["PASSIVATION_SQ", 3], ["ABORT", 4], ["ERROR", 5]], 4, "PRB_FSM"], "AV_NET_REG_TRB": [[["AV_NET_TRB_TIMESTAMP", 0], ["AV_NET_TRB_WAKE_UP", 1], ["AV_NET_TRB_IS_WOKEN_UP", 2], ["AV_NET_TRB_CLEAR_TO_TRIGGER", 3], ["AV_NET_TRB_PYROS", 4], ["AV_NET_TRB_HAS_TRIGGERED", 5], ["AV_NET_TRB_NB_REG", 6]], 4, "AV_NET_REG_TRB"], "AV_NET_REG_CAM": [[["AV_NET_CAM_TIMESTAMP", 0], ["AV_NET_CAM_WAKE_UP", 1], ["AV_NET_CAM_IS_WOKEN_UP", 2], ["AV_NET_CAM_RECORDING", 3]], 4, "AV_NET_REG_CAM"], "byte": [[], 1, "byte"], "align_val_t": [[], 8, "align_val_t"], "_Manager_operation": [[["__get_type_info", 0], ["__get_functor_ptr", 1], ["__clone_functor", 2], ["__destroy_functor", 3]], 4, "_Manager_operation"], "_Lock_policy": [[["_S_single", 0], ["_S_mutex", 1], ["_S_atomic", 2]], 4, "_Lock_policy"], "memory_order": [[["memory_order_relaxed", 0], ["memory_order_consume", 1], ["memory_order_acquire", 2], ["memory_order_release", 3], ["memory_order_acq_rel", 4], ["memory_order_seq_cst", 5]], 4, "memory_order"], "__memory_order_modifier": [[["__memory_order_mask", 65535], ["__memory_order_modifier_mask", 4294901760], ["__memory_order_hle_acquire", 65536], ["__memory_order_hle_release", 131072]], 4, "__memory_order_modifier"], "pointer_safety": [[["relaxed", 0], ["preferred", 1], ["strict", 2]], 4, "pointer_safety"], "errc": [[["address_family_not_supported", 97], ["address_in_use", 98], ["address_not_available", 99], ["already_connected", 106], ["argument_list_too_long", 7], ["argument_out_of_domain", 33], ["bad_address", 14], ["bad_file_descriptor", 9], ["bad_message", 74], ["broken_pipe", 32], ["connection_aborted", 103], ["connection_already_in_progress", 114], ["connection_refused", 111], ["connection_reset", 104], ["cross_device_link", 18], ["destination_address_required", 89], ["device_or_resource_busy", 16], ["directory_not_empty", 39], ["executable_format_error", 8], ["file_exists", 17], ["file_too_large", 27], ["filename_too_long", 36], ["function_not_supported", 38], ["host_unreachable", 113], ["identifier_removed", 43], ["illegal_byte_sequence", 84], ["inappropriate_io_control_operation", 25], ["interrupted", 4], ["invalid_argument", 22], ["invalid_seek", 29], ["io_error", 5], ["is_a_directory", 21], ["message_size", 90], ["network_down", 100], ["network_reset", 102], ["network_unreachable", 101], ["no_buffer_space", 105], ["no_child_process", 10], ["no_link", 67], ["no_lock_available", 37], ["no_message_available", 61], ["no_message", 42], ["no_protocol_option", 92], ["no_space_on_device", 28], ["no_stream_resources", 63], ["no_such_device_or_address", 6], ["no_such_device", 19], ["no_such_file_or_directory", 2], ["no_such_process", 3], ["not_a_directory", 20], ["not_a_socket", 88], ["not_a_stream", 60], ["not_connected", 107], ["not_enough_memory", 12], ["not_supported", 95], ["operation_canceled", 125], ["operation_in_progress", 115], ["operation_not_permitted", 1], ["operation_not_supported", 95], ["operation_would_block", 11], ["owner_dead", 130], ["permission_denied", 13], ["protocol_error", 71], ["protocol_not_supported", 93], ["read_only_file_system", 30], ["resource_deadlock_would_occur", 35], ["resource_unavailable_try_again", 11], ["result_out_of_range", 34], ["state_not_recoverable", 131], ["stream_timeout", 62], ["text_file_busy", 26], ["timed_out", 110], ["too_many_files_open_in_system", 23], ["too_many_files_open", 24], ["too_many_links", 31], ["too_many_symbolic_link_levels", 40], ["value_too_large", 75], ["wrong_protocol_type", 91]], 4, "errc"], "_Ios_Fmtflags": [[["_S_boolalpha", 1], ["_S_dec", 2], ["_S_fixed", 4], ["_S_hex", 8], ["_S_internal", 16], ["_S_left", 32], ["_S_oct", 64], ["_S_right", 128], ["_S_scientific", 256], ["_S_showbase", 512], ["_S_showpoint", 1024], ["_S_showpos", 2048], ["_S_skipws", 4096], ["_S_unitbuf", 8192], ["_S_uppercase", 16384], ["_S_adjustfield", 176], ["_S_basefield", 74], ["_S_floatfield", 260], ["_S_ios_fmtflags_end", 65536], ["_S_ios_fmtflags_max", 2147483647], ["_S_ios_fmtflags_min", -2147483648]], 4, "_Ios_Fmtflags"], "_Ios_Openmode": [[["_S_app", 1], ["_S_ate", 2], ["_S_bin", 4], ["_S_in", 8], ["_S_out", 16], ["_S_trunc", 32], ["_S_noreplace", 64], ["_S_ios_openmode_end", 65536], ["_S_ios_openmode_max", 2147483647], ["_S_ios_openmode_min", -2147483648]], 4, "_Ios_Openmode"], "_Ios_Iostate": [[["_S_goodbit", 0], ["_S_badbit", 1], ["_S_eofbit", 2], ["_S_failbit", 4], ["_S_ios_iostate_end", 65536], ["_S_ios_iostate_max", 2147483647], ["_S_ios_iostate_min", -2147483648]], 4, "_Ios_Iostate"], "_Ios_Seekdir": [[["_S_beg", 0], ["_S_cur", 1], ["_S_end", 2], ["_S_ios_seekdir_end", 65536]], 4, "_Ios_Seekdir"], "io_errc": [[["stream", 1]], 4, "io_errc"], "event": [[["erase_event", 0], ["imbue_event", 1], ["copyfmt_event", 2]], 4, "ios_base::event"], "float_round_style": [[["round_indeterminate", -1], ["round_toward_zero", 0], ["round_to_nearest", 1], ["round_toward_infinity", 2], ["round_toward_neg_infinity", 3]], 4, "float_round_style"], "float_denorm_style": [[["denorm_indeterminate", -1], ["denorm_absent", 0], ["denorm_present", 1]], 4, "float_denorm_style"], "dateorder": [[["no_order", 0], ["dmy", 1], ["mdy", 2], ["ymd", 3], ["ydm", 4]], 4, "time_base::dateorder"], "part": [[["none", 0], ["space", 1], ["symbol", 2], ["sign", 3], ["value", 4]], 4, "money_base::part"], "result": [[["ok", 0], ["partial", 1], ["error", 2], ["noconv", 3]], 4, "codecvt_base::result"], "cv_status": [[["no_timeout", 0], ["timeout", 1]], 4, "cv_status"], "GTestLogSeverity": [[["GTEST_INFO", 0], ["GTEST_WARNING", 1], ["GTEST_ERROR", 2], ["GTEST_FATAL", 3]], 4, "GTestLogSeverity"], "_Op": [[["_Op_access", 0], ["_Op_get_type_info", 1], ["_Op_clone", 2], ["_Op_destroy", 3], ["_Op_xfer", 4]], 4, "any::_Op"], "_Construct": [[["_Token", 0]], 4, "nullopt_t::_Construct"], "__itimer_which": [[["ITIMER_REAL", 0], ["ITIMER_VIRTUAL", 1], ["ITIMER_PROF", 2]], 4, "__itimer_which"], "_Rb_tree_color": [[["_S_red", 0], ["_S_black", 1]], 4, "_Rb_tree_color"], "__masks": [[["__const_mask", 1], ["__volatile_mask", 2], ["__restrict_mask", 4], ["__incomplete_mask", 8], ["__incomplete_class_mask", 16], ["__transaction_safe_mask", 32], ["__noexcept_mask", 64]], 4, "__pbase_type_info::__masks"], "__offset_flags_masks": [[["__virtual_mask", 1], ["__public_mask", 2], ["__hwm_bit", 2], ["__offset_shift", 8]], 4, "__base_class_type_info::__offset_flags_masks"], "__sub_kind": [[["__unknown", 0], ["__not_contained", 1], ["__contained_ambig", 2], ["__contained_virtual_mask", 1], ["__contained_public_mask", 2], ["__contained_mask", 4], ["__contained_private", 4], ["__contained_public", 6]], 4, "__class_type_info::__sub_kind"], "__flags_masks": [[["__non_diamond_repeat_mask", 1], ["__diamond_shaped_mask", 2], ["__flags_unknown_mask", 16]], 4, "__vmi_class_type_info::__flags_masks"], "EditType": [[["kMatch", 0], ["kAdd", 1], ["kRemove", 2], ["kReplace", 3]], 4, "EditType"], "TestRole": [[["OVERSEE_TEST", 0], ["EXECUTE_TEST", 1]], 4, "DeathTest::TestRole"], "AbortReason": [[["TEST_ENCOUNTERED_RETURN_STATEMENT", 0], ["TEST_THREW_EXCEPTION", 1], ["TEST_DID_NOT_DIE", 2]], 4, "DeathTest::AbortReason"], "Type": [[["kSuccess", 0], ["kNonFatalFailure", 1], ["kFatalFailure", 2], ["kSkip", 3]], 4, "TestPartResult::Type"], "TypeKind": [[["kBool", 0], ["kInteger", 1], ["kFloatingPoint", 2], ["kOther", 3]], 4, "TypeKind"], "FailureType": [[["kNonfatal", 0], ["kFatal", 1]], 4, "FailureReporterInterface::FailureType"], "LogSeverity": [[["kInfo", 0], ["kWarning", 1]], 4, "LogSeverity"], "Flags": [[["Superset", 1], ["Subset", 2], ["ExactMatch", 3]], 4, "UnorderedMatcherRequire::Flags"], "Clause": [[["kNone", 0], ["kWith", 1], ["kTimes", 2], ["kInSequence", 3], ["kAfter", 4], ["kWillOnce", 5], ["kWillRepeatedly", 6], ["kRetiresOnSaturation", 7]], 4, "ExpectationBase::Clause"], "CallReaction": [[["kAllow", 0], ["kWarn", 1], ["kFail", 2]], 4, "CallReaction"], "LookaheadMode": [[["SKIP_ALL", 0], ["SKIP_NONE", 1], ["SKIP_WHITESPACE", 2]], 4, "LookaheadMode"], "CAPSULE_ID": [[["GSC_CMD", 8], ["GSC_INTERNAL", 9], ["GSE_TELEMETRY", 10], ["HOPPER_TELEMETRY", 12], ["AV_TELEMETRY", 12], ["ABORT_BOARD", 13], ["GSC_INTERNAL_UPLINK", 21], ["GSC_INTERNAL_VEHICLE_DOWNLINK", 22], ["GSC_INTERNAL_GSE_DOWNLINK", 23]], 4, "CAPSULE_ID"], "CMD_ID": [[["NO_PACKET", 0], ["AV_CMD_CALIBRATE", 3], ["AV_CMD_RECOVER", 4], ["AV_CMD_ARM", 5], ["AV_CMD_LAUNCH", 6], ["AV_CMD_ABORT", 7], ["AV_CMD_P_LOX", 8], ["AV_CMD_P_FUEL", 9], ["AV_CMD_MAIN_LOX", 10], ["AV_CMD_MAIN_FUEL", 11], ["AV_CMD_VENT_LOX", 12], ["AV_CMD_VENT_FUEL", 13], ["AV_CMD_VENT_N2", 14], ["GSE_CMD_IDLE", 15], ["GSE_CMD_ARM", 16], ["GSE_CMD_CALIBRATE", 17], ["GSE_CMD_PASSIVATE", 18], ["GSE_CMD_SERVO_1", 19], ["GSE_CMD_SERVO_2", 20], ["GSE_CMD_TOGGLE_11", 21], ["GSE_CMD_TOGGLE_12", 22], ["GSE_CMD_TOGGLE_13", 23], ["GSE_CMD_TOGGLE_14", 24], ["GSE_CMD_TOGGLE_15", 25], ["GSE_CMD_TOGGLE_16", 26], ["GSE_CMD_TOGGLE_21", 27], ["GSE_CMD_TOGGLE_22", 28], ["GSE_CMD_TOGGLE_23", 29], ["GSE_CMD_TOGGLE_24", 30], ["GSE_CMD_TOGGLE_25", 31], ["GSE_CMD_TOGGLE_26", 32], ["GSE_CMD_TOGGLE_27", 33], ["GSE_CMD_TOGGLE_28", 34]], 4, "CMD_ID"], "control_state_copy": [[["AV_CONTROL_IDLE", 0], ["AV_CONTROL_CALIBRATION", 1], ["AV_CONTROL_MANUAL_OPERATION", 2], ["AV_CONTROL_ARMED", 3], ["AV_CONTROL_PRESSURED", 4], ["AV_CONTROL_IGNITER", 5], ["AV_CONTROL_IGNITION", 6], ["AV_CONTROL_THRUST", 7], ["AV_CONTROL_SHUTDOWN", 8], ["AV_CONTROL_GLIDE", 9], ["AV_CONTROL_DESCENT", 10], ["AV_CONTROL_SAFE", 11], ["AV_CONTROL_ERROR", 12], ["AV_CONTROL_ABORT", 13]], 4, "control_state_copy"], "FLIGHTMODE": [[["INITIALIZE_MODE", 0], ["READYSTEADY_MODE", 1], ["CALIBRATION_MODE", 2], ["MANUAL_MODE", 3], ["ARMED_MODE", 4], ["PRESSURED_MODE", 5], ["IGNITER_MODE", 6], ["IGNITION_MODE", 7], ["THRUST_MODE", 8], ["SHUTDOWN_MODE", 9], ["ASCENT_MODE", 10], ["DESCENT_MODE", 11], ["GLIDING_MODE", 12], ["ABORT_MODE", 13]], 4, "FLIGHTMODE"], "ParserState": [[["PREAMBLE_A", 0], ["PREAMBLE_B", 1], ["PACKET_ID", 2], ["LENGTH", 3], ["PAYLOAD", 4], ["CRC", 5]], 4, "ParserState"], "__pid_type": [[["F_OWNER_TID", 0], ["F_OWNER_PID", 1], ["F_OWNER_PGRP", 2], ["F_OWNER_GID", 2]], 4, "__pid_type"], "Severity": [[["FATAL", 0], ["ERROR", 1], ["WARN", 2], ["INFO", 3], ["DEBUG", 4], ["NB_SEVERITY", 5]], 4, "Severity"], "State": [[["INIT", 0], ["CALIBRATION", 1], ["FILLING", 2], ["ARMED", 3], ["PRESSURIZATION", 4], ["ABORT_ON_GROUND", 5], ["IGNITION", 6], ["BURN", 7], ["ASCENT", 8], ["LANDED", 9], ["DESCENT", 10], ["ABORT_IN_FLIGHT", 11]], 4, "State"], "GoatReg": [[["AV_STATE", 0], ["AV_TIMESTAMP", 1], ["TLM_CMD_ID", 2], ["TLM_CMD_VALUE", 3], ["AV_FC_TEMPERATURE", 4], ["AV_AMB_TEMPERATURE", 5], ["NAV_SENSOR_ADXL1_STAT", 6], ["NAV_SENSOR_ADXL2_STAT", 7], ["NAV_SENSOR_BMI1_ACCEL_STAT", 8], ["NAV_SENSOR_BMI2_ACCEL_STAT", 9], ["NAV_SENSOR_BMI1_GYRO_STAT", 10], ["NAV_SENSOR_BMI2_GYRO_STAT", 11], ["NAV_SENSOR_BMP1_STAT", 12], ["NAV_SENSOR_BMP2_STAT", 13], ["NAV_SENSOR_ADXL1_DATA", 14], ["NAV_SENSOR_ADXL2_DATA", 15], ["NAV_SENSOR_BMI1_ACCEL_DATA", 16], ["NAV_SENSOR_BMI1_GYRO_DATA", 17], ["NAV_SENSOR_BMI2_ACCEL_DATA", 18], ["NAV_SENSOR_BMI2_GYRO_DATA", 19], ["NAV_SENSOR_BMP1_DATA", 20], ["NAV_SENSOR_BMP2_DATA", 21], ["NAV_GNSS_TIME_YEAR", 22], ["NAV_GNSS_TIME_MONTH", 23], ["NAV_GNSS_TIME_DAY", 24], ["NAV_GNSS_TIME_HOUR", 25], ["NAV_GNSS_TIME_MINUTE", 26], ["NAV_GNSS_TIME_SECOND", 27], ["NAV_GNSS_TIME_CENTI", 28], ["NAV_GNSS_POS_LAT", 29], ["NAV_GNSS_POS_LNG", 30], ["NAV_GNSS_POS_ALT", 31], ["NAV_GNSS_SPEED", 32], ["NAV_GNSS_COURSE", 33], ["NAV_KALMAN_DATA", 34], ["PR_SENSOR_P_NCO", 35], ["PR_SENSOR_P_ETA", 36], ["PR_SENSOR_P_OTA", 37], ["PR_SENSOR_P_CIG", 38], ["PR_SENSOR_P_EIN", 39], ["PR_SENSOR_P_OIN", 40], ["PR_SENSOR_P_CCC", 41], ["PR_SENSOR_T_NCO", 42], ["PR_SENSOR_T_ETA", 43], ["PR_SENSOR_T_OTA", 44], ["PR_SENSOR_T_CIG", 45], ["PR_SENSOR_T_EIN", 46], ["PR_SENSOR_T_EIN_CF", 47], ["PR_SENSOR_T_OIN", 48], ["PR_SENSOR_T_CCC", 49], ["PR_BOARD_FSM_STATE", 50], ["VALVES", 51], ["BAT_LPB_VOLTAGE", 52], ["BAT_LPB_CURRENT", 53], ["BAT_HPB_VOLTAGE", 54], ["BAT_HPB_CURRENT", 55], ["CAM_RECORDING_SEP", 56], ["CAM_RECORDING_UP", 57], ["CAM_RECORDING_DOWN", 58], ["EVENT_CMD_RECEIVED", 59], ["EVENT_CALIBRATED", 60], ["EVENT_DPR_ETH_READY", 61], ["EVENT_DPR_ETH_PRESSURE_OK", 62], ["EVENT_DPR_LOX_READY", 63], ["EVENT_DPR_LOX_PRESSURE_OK", 64], ["EVENT_PRB_READY", 65], ["EVENT_TRB_READY", 66], ["EVENT_IGNITED", 67], ["EVENT_ENGINE_CUT_OFF", 68], ["EVENT_SEPERATED", 69], ["EVENT_CHUTE_OPENED", 70], ["EVENT_CHUTE_UNREEFED", 71], ["EVENT_IGNITION_FAILED", 72]], 4, "Data::GoatReg"], "bmi08_intf": [[["BMI08_I2C_INTF", 0], ["BMI08_SPI_INTF", 1]], 4, "bmi08_intf"], "bmi08_variant": [[["BMI085_VARIANT", 0], ["BMI088_VARIANT", 1]], 4, "bmi08_variant"], "bmi08_accel_int_channel": [[["BMI08_INT_CHANNEL_1", 0], ["BMI08_INT_CHANNEL_2", 1]], 4, "bmi08_accel_int_channel"], "bmi08_gyro_int_channel": [[["BMI08_INT_CHANNEL_3", 0], ["BMI08_INT_CHANNEL_4", 1]], 4, "bmi08_gyro_int_channel"], "bmi08_accel_int_types": [[["BMI08_ACCEL_INT_DATA_RDY", 0], ["BMI08_ACCEL_INT_SYNC_DATA_RDY", 1], ["BMI08_ACCEL_SYNC_INPUT", 2], ["BMI08_ACCEL_INT_FIFO_WM", 3], ["BMI08_ACCEL_INT_FIFO_FULL", 4]], 4, "bmi08_accel_int_types"], "bmi08_gyro_int_types": [[["BMI08_GYRO_INT_DATA_RDY", 0], ["BMI08_GYRO_INT_FIFO_WM", 1], ["BMI08_GYRO_INT_FIFO_FULL", 2]], 4, "bmi08_gyro_int_types"], "ina228_mode_enum": [[["INA228_MODE_SHUTDOWN", 0], ["INA228_MODE_TRIG_BUS", 1], ["INA228_MODE_TRIG_SHUNT", 2], ["INA228_MODE_TRIG_BUS_SHUNT", 3], ["INA228_MODE_TRIG_TEMP", 4], ["INA228_MODE_TRIG_TEMP_BUS", 5], ["INA228_MODE_TRIG_TEMP_SHUNT", 6], ["INA228_MODE_TRIG_TEMP_BUS_SHUNT", 7], ["INA228_MODE_SHUTDOWN2", 8], ["INA228_MODE_CONT_BUS", 9], ["INA228_MODE_CONT_SHUNT", 10], ["INA228_MODE_CONT_BUS_SHUNT", 11], ["INA228_MODE_CONT_TEMP", 12], ["INA228_MODE_CONT_TEMP_BUS", 13], ["INA228_MODE_CONT_TEMP_SHUNT", 14], ["INA228_MODE_CONT_TEMP_BUS_SHUNT", 15]], 4, "ina228_mode_enum"], "ina228_average_enum": [[["INA228_1_SAMPLE", 0], ["INA228_4_SAMPLES", 1], ["INA228_16_SAMPLES", 2], ["INA228_64_SAMPLES", 3], ["INA228_128_SAMPLES", 4], ["INA228_256_SAMPLES", 5], ["INA228_512_SAMPLES", 6], ["INA228_1024_SAMPLES", 7]], 4, "ina228_average_enum"], "ina228_timing_enum": [[["INA228_50_us", 0], ["INA228_84_us", 1], ["INA228_150_us", 2], ["INA228_280_us", 3], ["INA228_540_us", 4], ["INA228_1052_us", 5], ["INA228_2074_us", 6], ["INA228_4120_us", 7]], 4, "ina228_timing_enum"], "ina228_diag_enum": [[["INA228_DIAG_MEMORY_STATUS", 0], ["INA228_DIAG_CONVERT_COMPLETE", 1], ["INA228_DIAG_POWER_OVER_LIMIT", 2], ["INA228_DIAG_BUS_UNDER_LIMIT", 3], ["INA228_DIAG_BUS_OVER_LIMIT", 4], ["INA228_DIAG_SHUNT_UNDER_LIMIT", 5], ["INA228_DIAG_SHUNT_OVER_LIMIT", 6], ["INA228_DIAG_TEMP_OVER_LIMIT", 7], ["INA228_DIAG_RESERVED", 8], ["INA228_DIAG_MATH_OVERFLOW", 9], ["INA228_DIAG_CHARGE_OVERFLOW", 10], ["INA228_DIAG_ENERGY_OVERFLOW", 11], ["INA228_DIAG_ALERT_POLARITY", 12], ["INA228_DIAG_SLOW_ALERT", 13], ["INA228_DIAG_CONVERT_READY", 14], ["INA228_DIAG_ALERT_LATCH", 15]], 4, "ina228_diag_enum"], "bmp3_intf": [[["BMP3_SPI_INTF", 0], ["BMP3_I2C_INTF", 1]], 4, "bmp3_intf"], "TMP1075_ConsecutiveFaults": [[["Fault_1", 0], ["Fault_2", 1], ["Fault_3", 2], ["Fault_4", 3]], 1, "TMP1075_ConsecutiveFaults"], "TMP1075_ConversionTime": [[["ConversionTime27_5ms", 0], ["ConversionTime55ms", 1], ["ConversionTime110ms", 2], ["ConversionTime220ms", 3]], 1, "TMP1075_ConversionTime"], "TMP1075_Offsets": [[["OS", 7], ["R", 5], ["F", 3], ["POL", 2], ["TM", 1], ["SD", 0]], 1, "TMP1075_Offsets"]}]}